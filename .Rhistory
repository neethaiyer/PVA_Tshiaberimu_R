res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(startingConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
write.csv(res, file=paste0(workingDir,"pva_ABM_50year/Scenario", j,".csv"), row.names=F)
}
initalConditions <- convertToList(scenario = ReintroScenario_IBM, adultAge=8, weaningAge=3.5)
nyears <- 10 ## Projection Period
timeunit <- 1/12 ## timestep
nruns <-10 ## Number of simulations to run
alpha <- 0.99 ## function of the fertility rate
## Apply the IBM function to each scenario:
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(startingConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
write.csv(res, file=paste0(workingDir,"pva_ABM_50year/Scenario", j,".csv"), row.names=F)
}
initalConditions <- convertToList(scenario = ReintroScenario_IBM, adultAge=8, weaningAge=3.5)
nyears <- 10 ## Projection Period
timeunit <- 1/12 ## timestep
nruns <-10 ## Number of simulations to run
alpha <- 0.99 ## fun
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(startingConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
write.csv(res, file=paste0(workingDir,"pva_ABM_50year/Scenario", j,".csv"), row.names=F)
}
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(startingConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
write.csv(res, file=paste0(workingDir,"pva_IBM_50year/Scenario", j,".csv"), row.names=F)
}
## Set the working directory:
workingDir <- "~/Box Sync/PVA_Paper/PVA_Tshiaberimu_R/"
dat <- read.csv(paste0(workingDir, "Gorilla_LifeTables.csv"))
dat$fertilityrate_1percent <- dat1[,3]*.643 ## fertility rates multiplied by factor less than 1 to get eigen values of 1.01 which corresponds to a 1% growth rate
dat$fertilityrate_2percent <- dat1[,3]*.786 ## fertility rates multiplied by factor less than 1 to get eigen values of 1.02 which corresponds to a 2% growth rate
dat <- read.csv(paste0(workingDir, "Gorilla_LifeTables.csv"))
dat$fertilityrate_1percent <- dat[,3]*.643 ## fertility rates multiplied by factor less than 1 to get eigen values of 1.01 which corresponds to a 1% growth rate
dat$fertilityrate_2percent <- dat[,3]*.786 ## fertility rates multiplied by factor less than 1 to get eigen values of 1.02 which corresponds to a 2% growth rate
View(dat)
dat <- read.csv(paste0(workingDir, "Gorilla_LifeTables.csv"))
dat$fertilityrate_2percent <- dat[,3]*.786 ## fertility rates multiplied by factor less than 1 to get eigen values of 1.01 which corresponds to a 1% growth rate
dat$fertilityrate_1percent <- dat[,3]*.643 ## fertility rates multiplied by factor less than 1 to get eigen values of 1.02 which corresponds to a 2% growth rate
View(dat)
## A. Create the Leslie Matrix for MTN with fertility rates that correspond to 3% growth rate
mat <- matrix(0, nrow=nrow(dat), ncol=nrow(dat)) ## create an empty square matrix
mat[1,] <- dat[,3] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat)-1, nrow=ncol(mat)-1)
diag(mat2) <- 1-dat[-nrow(dat),2] ## survival rates are assigned to just under the diagonal of a LM
mat[2:nrow(mat), 1:(ncol(mat)-1)] <- mat2
write.csv(mat, file=paste0(workingDir,"LeslieMatrix_MTN_3%.csv"), row.names=F)
## B. Create the Leslie Matrix for MTN with fertility rates that correspond to 2% growth rate
mat <- matrix(0, nrow=nrow(dat), ncol=nrow(dat)) ## create an empty square matrix
mat[1,] <- dat[,6] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat)-1, nrow=ncol(mat)-1)
diag(mat2) <- 1-dat[-nrow(dat),2] ## survival rates are assigned to just under the diagonal of a LM
mat[2:nrow(mat), 1:(ncol(mat)-1)] <- mat2
write.csv(mat, file=paste0(workingDir,"LeslieMatrix_MTN_2%.csv"), row.names=F)
## C. Create the Leslie Matrix for MTN with fertility rates that correspond to 1% growth rate
mat <- matrix(0, nrow=nrow(dat1), ncol=nrow(dat1)) ## create an empty square matrix
mat[1,] <- dat[,7] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat)-1, nrow=ncol(mat)-1)
diag(mat2) <- 1-dat[-nrow(dat),2] ## survival rates are assigned to just under the diagonal of a LM
mat[2:nrow(mat), 1:(ncol(mat)-1)] <- mat2
write.csv(mat, file=paste0(workingDir,"LeslieMatrix_MTN_1%.csv"), row.names=F)
## D. Create the Leslie Matrix for WLG with constant fertility rates
mat <- matrix(0, nrow=nrow(dat1), ncol=nrow(dat1)) ## create an empty square matrix
mat[1,] <- dat[,5] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat)-1, nrow=ncol(mat)-1)
diag(mat2) <- 1-dat[-nrow(dat),4] ## survival rates are assigned to just under the diagonal of a LM
mat[2:nrow(mat), 1:(ncol(mat)-1)] <- mat2
write.csv(mat, file=paste0(workingDir,"LeslieMatrix_WLG.csv"), row.names=F)
mat <- matrix(0, nrow=nrow(dat), ncol=nrow(dat)) ## create an empty square matrix
mat[1,] <- dat[,3] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat)-1, nrow=ncol(mat)-1)
diag(mat2) <- 1-dat[-nrow(dat),2] ## survival rates are assigned to just under the diagonal of a LM
mat[2:nrow(mat), 1:(ncol(mat)-1)] <- mat2
write.csv(mat, file=paste0(workingDir,"LeslieMatrix_MTN_3%.csv"), row.names=F)
## B. Create the Leslie Matrix for MTN with fertility rates that correspond to 2% growth rate
mat <- matrix(0, nrow=nrow(dat), ncol=nrow(dat)) ## create an empty square matrix
mat[1,] <- dat[,6] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat)-1, nrow=ncol(mat)-1)
diag(mat2) <- 1-dat[-nrow(dat),2] ## survival rates are assigned to just under the diagonal of a LM
mat[2:nrow(mat), 1:(ncol(mat)-1)] <- mat2
write.csv(mat, file=paste0(workingDir,"LeslieMatrix_MTN_2%.csv"), row.names=F)
## C. Create the Leslie Matrix for MTN with fertility rates that correspond to 1% growth rate
mat <- matrix(0, nrow=nrow(dat), ncol=nrow(dat)) ## create an empty square matrix
mat[1,] <- dat[,7] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat)-1, nrow=ncol(mat)-1)
diag(mat2) <- 1-dat[-nrow(dat),2] ## survival rates are assigned to just under the diagonal of a LM
mat[2:nrow(mat), 1:(ncol(mat)-1)] <- mat2
write.csv(mat, file=paste0(workingDir,"LeslieMatrix_MTN_1%.csv"), row.names=F)
## D. Create the Leslie Matrix for WLG with constant fertility rates
mat <- matrix(0, nrow=nrow(dat), ncol=nrow(dat)) ## create an empty square matrix
mat[1,] <- dat[,5] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat)-1, nrow=ncol(mat)-1)
diag(mat2) <- 1-dat[-nrow(dat),4] ## survival rates are assigned to just under the diagonal of a LM
mat[2:nrow(mat), 1:(ncol(mat)-1)] <- mat2
write.csv(mat, file=paste0(workingDir,"LeslieMatrix_WLG.csv"), row.names=F)
colorRampPalette(coral, azure)
coral <- rgb(250, 128, 114, alpha=150, maxColorValue = 255) ## for WLG
azure4 <- rgb(131, 139, 139, alpha=150, maxColorValue = 255) ## for MTN
colorRampPalette(coral, azure)
colorRampPalette(coral, azure4)
colorRampPalette(c(coral, azure4))
colorRampPalette(c("salmon","grey"))
colfun <- colorRampPalette(c("salmon","grey"))
colfun(4)
colfun <- colorRampPalette(coral, azure4)
colfun(4)
colfun <- colorRampPalette(c(coral, azure4))
colfun(4)
plot(rep(1,4),col=colfunc(4),pch=19,cex=3)
plot(rep(1,4),col=colfun(4),pch=19,cex=3)
colfun[1]
class(colfun)
matMTN3 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_3%.csv"))
matMTN2 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_2%.csv"))
matMTN1 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_1%.csv"))
matWLG <- read.csv(paste0(workingDir, "LeslieMatrix_WLG.csv"))
colfun <- colorRampPalette(c("coral", "azure4"))
colfun(4)
## A. Color for MTN with 3% growth rate
colMTN3 <- "#838B8B"
## B. Color for MTN with 2% growth rate
ccolMTN2 <- "#D2A9A4"
## C. Color for MTN with 1% growth rate
colMTN1 <- "#D2837A"
## D. Color for WLG
colWLG <- "#D2837A"
matMTN3 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_3%.csv"))
matMTN2 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_2%.csv"))
matMTN1 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_1%.csv"))
matWLG <- read.csv(paste0(workingDir, "LeslieMatrix_WLG.csv"))
matMTN3 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_3%.csv"))
matMTN2 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_2%.csv"))
matMTN1 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_1%.csv"))
matWLG <- read.csv(paste0(workingDir, "LeslieMatrix_WLG.csv"))
workingDir <- "~/Box Sync/PVA_Paper/PVA_Tshiaberimu_R/"
##workingDir <- "~/Documents/git repositories/PVA_Tshiaberimu_R/"
## Let's pick our colors for MTN and WLG and include a transparency factor; note that these are only used for the bargraph below:
colfun <- colorRampPalette(c("coral", "azure4"))
colfun(4)
## A. Color for MTN with 3% growth rate
colMTN3 <- "#838B8B"
## B. Color for MTN with 2% growth rate
ccolMTN2 <- "#D2A9A4"
## C. Color for MTN with 1% growth rate
colMTN1 <- "#D2837A"
## D. Color for WLG
colWLG <- "#D2837A"
matMTN3 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_3%.csv"))
matMTN2 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_2%.csv"))
matMTN1 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_1%.csv"))
matWLG <- read.csv(paste0(workingDir, "LeslieMatrix_WLG.csv"))
dat <- read.csv(paste0(workingDir, "Gorilla_LifeTables.csv"))
dat$fertilityrate_2percent <- dat[,3]*.786 ## fertility rates multiplied by factor less than 1 to get eigen values of 1.01 which corresponds to a 1% growth rate
dat$fertilityrate_1percent <- dat[,3]*.643 ## fertility rates multiplied by factor less than 1 to get eigen values of 1.02 which corresponds to a 2% growth rate
View(dat)
i <-1
dat[1:(i-1),2]
dat[1:(i-1),4]
## A. Demographic pyramid for MTN (same for 3%, 2%, and 1%)
n <- rep(1, nrow(dat))
n[1] <- 1
for (i in 2:length(n)){
n[i] <- prod(1-dat[1:(i-1),2])
} ## Make sure sum equals 1 to generate pyramid
n <- n/(sum(n))
## D. Demographic pyramid for WLG
n <- rep(1, nrow(dat))
n[1] <- 1
for (i in 2:length(n)){
n[i] <- prod(1-dat[1:(i-1),4])
} ## Make sure sum equals 1 to generate pyramid
n <- n/(sum(n))
n <- rep(1, nrow(dat))
n[1] <- 1
for (i in 2:length(n)){
n[i] <- prod(1-dat[1:(i-1),2])
} ## Make sure sum equals 1 to generate pyramid
n_mtn <- n/(sum(n))
## D. Demographic pyramid for WLG
n <- rep(1, nrow(dat))
n[1] <- 1
for (i in 2:length(n)){
n[i] <- prod(1-dat[1:(i-1),4])
} ## Make sure sum equals 1 to generate pyramid
n_wlg <- n/(sum(n))
barplot(n_mtn, horiz=T, names.arg=paste0(0:(length(n_mtn)-1), "-", 1:length(n_mtn)), las=1, xlab="relative frequency", col=azure4, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, xlim=c(0,0.07))
## B. Dem Pyramid for MTN with 2% growth rate
barplot(n_wlg, horiz=T, names.arg=paste0(0:(length(n_wlg)-1), "-", 1:length(n_wlg)), las=1, xlab="relative frequency", col=coral, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, add=TRUE)
## A. Dem Pyramid for MTN with 3%, 2% and 1% growth rate
barplot(n_mtn, horiz=T, names.arg=paste0(0:(length(n_mtn)-1), "-", 1:length(n_mtn)), las=1, xlab="relative frequency", col=matMTN3, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, xlim=c(0,0.07))
## D. Dem Pyramid for WLG
barplot(n_wlg, horiz=T, names.arg=paste0(0:(length(n_wlg)-1), "-", 1:length(n_wlg)), las=1, xlab="relative frequency", col=matWLG, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, add=TRUE)
barplot(n_mtn, horiz=T, names.arg=paste0(0:(length(n_mtn)-1), "-", 1:length(n_mtn)), las=1, xlab="relative frequency", col=matMTN3, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, xlim=c(0,0.07))
colfun <- colorRampPalette(c("coral", "azure4"))
colfun(4)
## A. Color for MTN with 3% growth rate
colMTN3 <- "#838B8B"
## B. Color for MTN with 2% growth rate
ccolMTN2 <- "#D2A9A4"
## C. Color for MTN with 1% growth rate
colMTN1 <- "#D2837A"
## D. Color for WLG
colWLG <- "#D2837A"
barplot(n_mtn, horiz=T, names.arg=paste0(0:(length(n_mtn)-1), "-", 1:length(n_mtn)), las=1, xlab="relative frequency", col=matMTN3, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, xlim=c(0,0.07))
## D. Dem Pyramid for WLG
barplot(n_wlg, horiz=T, names.arg=paste0(0:(length(n_wlg)-1), "-", 1:length(n_wlg)), las=1, xlab="relative frequency", col=matWLG, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, add=TRUE)
barplot(n_mtn, horiz=T, names.arg=paste0(0:(length(n_mtn)-1), "-", 1:length(n_mtn)), las=1, xlab="relative frequency", col="azure4", cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, xlim=c(0,0.07))
## D. Dem Pyramid for WLG
barplot(n_wlg, horiz=T, names.arg=paste0(0:(length(n_wlg)-1), "-", 1:length(n_wlg)), las=1, xlab="relative frequency", col=matWLG, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, add=TRUE)
colMTN3
## A. Color for MTN with 3% growth rate
colMTN3 <- #838B8B
## B. Color for MTN with 2% growth rate
ccolMTN2 <- "#D2A9A4"
plot(rep(1,4),col=c(colMTN3,colMTN2,colMTN1, colWLG),pch=19,cex=3))
plot(rep(1,4), col=c(colMTN3,colMTN2,colMTN1,colWLG), pch=19 ,cex=3)
colfun <- colorRampPalette(c("coral", "azure4"))
colfun(4)
## A. Color for MTN with 3% growth rate
colMTN3 <- #838B8B
## B. Color for MTN with 2% growth rate
colMTN2 <- "#D2A9A4"
## C. Color for MTN with 1% growth rate
colMTN1 <- "#D2837A"
## D. Color for WLG
colWLG <- "#D2837A"
plot(rep(1,4), col=c(colMTN3,colMTN2,colMTN1,colWLG), pch=19 ,cex=3)
colfun <- colorRamp(c("coral", "azure4"))
colfun(4)
colfun <- colorRampPalette(c("coral", "azure4"))
colfun(4)
colMTN3 <- #838B8B
## B. Color for MTN with 2% growth rate
colMTN2 <- "#D2A9A4"
## C. Color for MTN with 1% growth rate
colMTN1 <- "#D2837A"
## D. Color for WLG
colWLG <- "#D2837A"
colMTN3
colfun <- colorRampPalette(c("azure4", "coral"))
colfun(4)
## A. Color for MTN with 3% growth rate
colMTN3 <- #838B8B
## B. Color for MTN with 2% growth rate
colMTN2 <- "#D2A9A4"
## C. Color for MTN with 1% growth rate
colMTN1 <- "#D2837A"
## D. Color for WLG
colWLG <- "#D2837A"
colMTN3
plot(rep(1,4), col=c(colMTN3,colMTN2,colMTN1,colWLG), pch=19 ,cex=3)
colfun <- colorRampPalette(c("coral", "grey"))
colfun(4)
## A. Color for MTN with 3% growth rate
colMTN3 <- #838B8B
## B. Color for MTN with 2% growth rate
colMTN2 <- "#D2A9A4"
## C. Color for MTN with 1% growth rate
colMTN1 <- "#D2837A"
## D. Color for WLG
colWLG <- "#D2837A"
plot(rep(1,4), col=c(colMTN3,colMTN2,colMTN1,colWLG), pch=19 ,cex=3)
colfun <- colorRampPalette(c("coral", "black"))
colfun(4)
## A. Color for MTN with 3% growth rate
colMTN3 <- #838B8B
## B. Color for MTN with 2% growth rate
colMTN2 <- "#D2A9A4"
## C. Color for MTN with 1% growth rate
colMTN1 <- "#D2837A"
## D. Color for WLG
colWLG <- "#D2837A"
plot(rep(1,4), col=c(colMTN3,colMTN2,colMTN1,colWLG), pch=19 ,cex=3)
colfun(4)
colfun <- colorRampPalette(c("coral", "azure4"))
colfun(4)
colfun <- colorRampPalette(c("azure4", "coral"))
colfun(4)
colfun <- colorRampPalette(c("azure4", "coral"))
colfun(4)
## A. Color for MTN with 3% growth rate
colMTN3 <- #838B8B
## B. Color for MTN with 2% growth rate
colMTN2 <- #AC8777
## C. Color for MTN with 1% growth rate
colMTN1 <- #D58363
## D. Color for WLG
colWLG <- #FF7F50
## A. Color for MTN with 3% growth rate
colMTN3 <- #838B8B
## B. Color for MTN with 2% growth rate
colMTN2 <- #AC8777
## C. Color for MTN with 1% growth rate
colMTN1 <- #D58363
## D. Color for WLG
colWLG <- #FF7F50
plot(rep(1,4), col=c(colMTN3,colMTN2,colMTN1,colWLG), pch=19 ,cex=3)
colMTN3 <- "#838B8B"
## B. Color for MTN with 2% growth rate
colMTN2 <- "#AC8777"
## C. Color for MTN with 1% growth rate
colMTN1 <- "#D58363"
## D. Color for WLG
colWLG <- "#FF7F50"
plot(rep(1,4), col=c(colMTN3,colMTN2,colMTN1,colWLG), pch=19 ,cex=3)
barplot(n_mtn, horiz=T, names.arg=paste0(0:(length(n_mtn)-1), "-", 1:length(n_mtn)), las=1, xlab="relative frequency", col=colMTN3, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, xlim=c(0,0.07))
## D. Dem Pyramid for WLG
barplot(n_wlg, horiz=T, names.arg=paste0(0:(length(n_wlg)-1), "-", 1:length(n_wlg)), las=1, xlab="relative frequency", col=colWLG, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, add=TRUE)
coral <- rgb(250, 128, 114, alpha=150, maxColorValue = 255) ## for WLG
azure4 <- rgb(131, 139, 139, alpha=150, maxColorValue = 255) ## for MTN
colfun <- colorRampPalette(c("azure4", "coral"))
colfun(4)
## A. Color for MTN with 3% growth rate
colMTN3 <- "#838B8B"
## B. Color for MTN with 2% growth rate
colMTN2 <- "#AC8777"
## C. Color for MTN with 1% growth rate
colMTN1 <- "#D58363"
## D. Color for WLG
colWLG <- "#FF7F50"
plot(rep(1,4), col=c(colMTN3,colMTN2,colMTN1,colWLG), pch=19 ,cex=3)
matMTN3 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_3%.csv"))
matMTN2 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_2%.csv"))
matMTN1 <- read.csv(paste0(workingDir, "LeslieMatrix_MTN_1%.csv"))
matWLG <- read.csv(paste0(workingDir, "LeslieMatrix_WLG.csv"))
barplot(n_mtn, horiz=T, names.arg=paste0(0:(length(n_mtn)-1), "-", 1:length(n_mtn)), las=1, xlab="relative frequency", col=azure4, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, xlim=c(0,0.07))
## D. Dem Pyramid for WLG
barplot(n_wlg, horiz=T, names.arg=paste0(0:(length(n_wlg)-1), "-", 1:length(n_wlg)), las=1, xlab="relative frequency", col=coral, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, add=TRUE)
barplot(n_mtn, horiz=T, names.arg=paste0(0:(length(n_mtn)-1), "-", 1:length(n_mtn)), las=1, xlab="relative frequency", col=colMTN3, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, xlim=c(0,0.07))
## D. Dem Pyramid for WLG
barplot(n_wlg, horiz=T, names.arg=paste0(0:(length(n_wlg)-1), "-", 1:length(n_wlg)), las=1, xlab="relative frequency", col=coral, cex.axis = 1, cex.names = 0.7, ylab="Age", cex.lab=1, font.lab=2, add=TRUE)
n <- rep(1, nrow(dat))
n[1] <- 1
for (i in 2:length(n)){
n[i] <- prod(1-dat[1:(i-1),2])
} ## Make sure sum equals 1 to generate pyramid
n_mtn <- n/(sum(n))
## for the cumulative survival curve:
n_mtnCS <- n/n[1]
## D. Demographic pyramid for WLG
n <- rep(1, nrow(dat))
n[1] <- 1
for (i in 2:length(n)){
n[i] <- prod(1-dat[1:(i-1),4])
} ## Make sure sum equals 1 to generate pyramid
n_wlg <- n/(sum(n))
## for the cumulative survival curve:
n_wlgCS <- n/n[1]
dat[,1:2]
dat[,1:2]
dat[,c(1,2)]
par(mfrow=c(1,2), oma=c(0,0,0,0), mar=c(5,4,2,1))
plot(dat[,c(1,2)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
lines(dat[,c(1,4)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
legend(0, 1, legend=c("Western Gorillas", "Mountain Gorillas"),
pt.bg=c("coral", "azure4"), lty=c(1,1), cex=0.8, text.font=2, pch=c(21,24))
plot(dat[,1],n_mtnCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
lines(dat[,1],n_wlgCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
legend(15, 1, legend=c("Mountain Gorillas", "Western Lowland Gorillas"),
pt.bg=c(colMTN3, colWLG), lty=c(1,1), cex=0.8, text.font=2, pch=c(21,24))
par(mfrow=c(1,2), oma=c(0,0,0,0), mar=c(5,4,2,1))
plot(dat[,c(1,2)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,c(1,4)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
legend(0, 1, legend=c("Western Gorillas", "Mountain Gorillas"),
pt.bg=c("coral", "azure4"), lty=c(1,1), cex=0.8, text.font=2, pch=c(24,21))
plot(dat[,1],n_mtnCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,1],n_wlgCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
legend(15, 1, legend=c("Mountain Gorillas", "Western Lowland Gorillas"),
pt.bg=c(colMTN3, colWLG), lty=c(1,1), cex=0.8, text.font=2, pch=c(24,21))
par(mfrow=c(1,2), oma=c(0,0,0,0), mar=c(5,4,2,1))
plot(dat[,c(1,2)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,c(1,4)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
legend(0, 1, legend=c("Mountain Gorillas", "Western Lowland Gorillas"),
pt.bg=c(colMTN3, colWLG), lty=c(1,1), cex=0.8, text.font=2, pch=c(24,21))
plot(dat[,1],n_mtnCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,1],n_wlgCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
legend(15, 1, legend=c("Mountain Gorillas", "Western Lowland Gorillas"),
pt.bg=c(colMTN3, colWLG), lty=c(1,1), cex=0.8, text.font=2, pch=c(24,21))
par(mfrow=c(1,2), oma=c(4,1,1,1), mar=c(5,4,2,1))
plot(dat[,c(1,2)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,c(1,4)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
plot(dat[,1],n_mtnCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,1],n_wlgCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", legend=c("Mountain Gorillas", "Western Lowland Gorillas"),
pt.bg=c(colMTN3, colWLG), lty=c(1,1), cex=0.8, text.font=2, pch=c(24,21), xpd = TRUE, horiz = TRUE, inset = c(0, 0), bty = "n")
par(mfrow=c(1,2), oma=c(4,1,1,1), mar=c(5,4,2,1))
plot(dat[,c(1,2)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,c(1,4)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
plot(dat[,1],n_mtnCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,1],n_wlgCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", legend=c("Mountain Gorillas", "Western Lowland Gorillas"),
pt.bg=c(colMTN3, colWLG), lty=c(1,1), cex=0.8, text.font=2, pch=c(24,21), xpd = TRUE, horiz = FALSE, inset = c(0, 0), bty = "y")
# xpd = TRUE tells R that it is OK to plot outside the region
# inset = c(x,y) tells R how to move the legend relative to the 'bottom' location
par(mfrow=c(1,2), oma=c(4,1,1,1), mar=c(5,4,2,1))
plot(dat[,c(1,2)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,c(1,4)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
plot(dat[,1],n_mtnCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,1],n_wlgCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", legend=c("Mountain Gorillas", "Western Lowland Gorillas"),
pt.bg=c(colMTN3, colWLG), lty=c(1,1), cex=0.8, text.font=2, pch=c(24,21), xpd = TRUE, horiz = FALSE, inset = c(0, 2), bty = "y")
# xpd = TRUE tells R that it is OK to plot outside the region
# inset = c(x,y) tells R how to move the legend relative to the 'bottom' location
par(mfrow=c(1,2), oma=c(4,1,1,1), mar=c(5,4,2,1))
plot(dat[,c(1,2)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,c(1,4)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
plot(dat[,1],n_mtnCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,1],n_wlgCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", legend=c("Mountain Gorillas", "Western Lowland Gorillas"),
pt.bg=c(colMTN3, colWLG), lty=c(1,1), cex=0.8, text.font=2, pch=c(24,21), xpd = TRUE, horiz = FALSE, inset = c(0, 0.1), bty = "y")
# xpd = TRUE tells R that it is OK to plot outside the region
# inset = c(x,y) tells R how to move the legend relative to the 'bottom' location
par(mfrow=c(1,2), oma=c(4,1,1,1), mar=c(5,4,2,1))
plot(dat[,c(1,2)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,c(1,4)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
plot(dat[,1],n_mtnCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,1],n_wlgCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", legend=c("Mountain Gorillas", "Western Lowland Gorillas"),
pt.bg=c(colMTN3, colWLG), lty=c(1,1), cex=0.8, text.font=2, pch=c(24,21), xpd = TRUE, horiz = FALSE, inset = c(0, 0.08), bty = "y")
# xpd = TRUE tells R that it is OK to plot outside the region
# inset = c(x,y) tells R how to move the legend relative to the 'bottom' location
par(mfrow=c(1,2), oma=c(4,1,1,1), mar=c(5,4,2,1))
plot(dat[,c(1,2)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,c(1,4)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
plot(dat[,1],n_mtnCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,1],n_wlgCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", legend=c("Mountain Gorillas", "Western Lowland Gorillas"),
pt.bg=c(colMTN3, colWLG), lty=c(1,1), cex=0.8, text.font=2, pch=c(24,21), xpd = TRUE, horiz = TRUE, inset = c(0, 0.08), bty = "y")
# xpd = TRUE tells R that it is OK to plot outside the region
# inset = c(x,y) tells R how to move the legend relative to the 'bottom' location
par(mfrow=c(1,2), oma=c(4,1,1,1), mar=c(5,4,2,1))
plot(dat[,c(1,2)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,c(1,4)], type="o", bty="l", xlab="Age", ylab="Annual mortality", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
plot(dat[,1],n_mtnCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colMTN3, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=24)
lines(dat[,1],n_wlgCS, bty="l", type="o", xlab="Age", ylab="Cumulative survival", las=1, bg=colWLG, cex.lab=0.8, cex.axis=0.8, ylim=c(0,1), cex=0.8, cex.lab=0.8, font.lab=2, pch=21)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", legend=c("Mountain Gorillas", "Western Lowland Gorillas"),
pt.bg=c(colMTN3, colWLG), lty=c(1,1), cex=0.8, text.font=2, pch=c(24,21), xpd = TRUE, horiz = FALSE, inset = c(0, 0.05), bty = "y")
# xpd = TRUE tells R that it is OK to plot outside the region
# inset = c(x,y) tells R how to move the legend relative to the 'bottom' location
pop_projection <- function(tfinal, LM=mat, No=No){
pop <- N <- No
for (i in 1:tfinal){
pop <- LM%*%pop
N <- cbind(N,pop)
}
N
}
workingDir <- "~/Box Sync/PVA_Paper/PVA_Tshiaberimu_R/"
##workingDir <- "~/Documents/git repositories/PVA_Tshiaberimu_R/"
############################################################################################
################################## LESLIE MATRIX FUNCTIONS #################################
############################################################################################
## The function below returns the deterministic LM population size projection, using the projection period (tfinal), age and number of females in the starting population (No) and Leslie matrix (LM).
#mat <- mat_wlg
pop_projection <- function(tfinal, LM=mat, No=No){
pop <- N <- No
for (i in 1:tfinal){
pop <- LM%*%pop
N <- cbind(N,pop)
}
N
}
## The function below returns the stochastic LM population size projection, using the projection period (tfinal), age and number of females in the starting population (No) and Leslie matrix (LM).
stoch_projection <- function(tfinal, LM=mat, No=No){
pop <- N <- No
for (i in 1:tfinal){
currentpop <- pop
for (j in 1:length(No)){
pop[j] <- sum(rbinom(n=length(No), size=currentpop, prob=LM[j,]))
}
N <- cbind(N, pop)
}
N
}
