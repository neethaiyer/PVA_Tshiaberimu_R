}
write.csv(temp, file=paste0("LM_Projection/LM_Stoch_Scenario", j,".csv"), row.names=F)
}
#####################################################################################
##################### PART 1: Leslie Matrix model (Simple PVA) ######################
#####################################################################################
setwd(workingDir_Output)
projectPop <- for(i in 2:ncol(ReintroScenario)){
No <- ReintroScenario[,i] ## Get the reintroduction scenario
N <- pop_projection(tfinal=nyears, LM=mat, No=No) ## Apply pop_projection function to No for this scenario
scenario <- strsplit(colnames(ReintroScenario)[i], "_")[[1]][2] ## Get the last element of the column name for each reintroducion scenario
det <- assign(paste0("N_projected_det", scenario), apply(N,2,sum))  ## The assign function takes a variable name as a character string and assigns a value to it. In this case, the values are N at each time step of the projection
write.csv(det, file=paste0("LM_Projection/LM_Det_Scenario", i-1, ".csv"), row.names=F)
}
temp <- matrix(0, nrow=nyears+1, ncol=nruns)
for(j in 1:(length(ReintroScenario)-1)){
for(i in 1:nruns) {
temp[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,j+1]),2,sum)
}
write.csv(temp, file=paste0("LM_Projection/LM_Stoch_Scenario", j,".csv"), row.names=F)
}
setwd("/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/")
## If these directories do not exsit, run this:
dir.create("PVA_Output")
dir.create("PVA_Input")
dir.create("PVA_Output/Results")
dir.create("PVA_Output/LM_Projection")
dir.create("PVA_Output/IBM_Projection")
## Select the working directory for input files:
workingDir_Input <- "/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/PVA_Input/"
## Select the working directory for output files:
workingDir_Output <- "/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/PVA_Output/"
## DAMIEN !!!!! Your wd: ## Make sure to update as above!
## workingDir <- "~/Documents/git repositories/PVA_Tshiaberimu_R/"
## Source the functions used in simulations below:
source("1. Function Definitions.R")
####################################################################################
############################ READ LIFE HISTORY TABLE ###############################
####################################################################################
setwd(workingDir_Input)
## Your life history tables should have at least 3 columns: age, mortality rate, and fertility rate:
dat <- read.csv("Gorilla_LifeTables.csv")
dat$fertilityrate_2percent <- dat[,3]*.786
## fertility rates multiplied by factor less than 1 to get eigen values of 1.01 which corresponds to a 1% growth rate
dat$fertilityrate_1percent <- dat[,3]*.643
## fertility rates multiplied by factor less than 1 to get eigen values of 1.02 which corresponds to a 2% growth rate
##################################################################
############## Create an object that selects the LM ##############
##################################################################
selectLM <- read.csv("LeslieMatrix_WLG.csv")
###############################################################################
############## SET THE INITIAL CONDITIONS OF THE LM & IBM MODELS ##############
###############################################################################
## Reintroduction Scenarios:
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,c(1,4:5)] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 4.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 10 ## 10 for WLG, 8 for MTN
temp <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, temp[,51])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N) ## check if Nfinal is about the same as Nfinal_expected for the required lambda value
Nfinal_expected <- 1.032^50*30 ## Nfinal_expected = lambda^t*No (lambda for 3% = 1.032)
N_random <- rep(Nfinal$age, round(Nfinal$N)) ## create vector with individuals and their ages
N_random <- sample(N_random, size=100, replace = FALSE, prob = NULL) ## randomly sample 100 individuals in each age class
N_random <- data.frame(subset(N_random, N_random>weaningAge)) ## remove individuals younger than weaning age
colnames(N_random) <- "TestScenario"
N_random
Nfinal_expected
Nfinal
temp
Nfinal
View(temp)
eigen.analysis(temp)
library(demogR)
install.packages("demogR")
library(demogR)
eigen.analysis(temp)
eigen.analysis(mat)
eigen.analysis(mat)
View(datX)
View(mat)
eigen.analysis(mat)
View(datX)
leslie.matrix(lx=diag(mat), mx=datX$fertilityrate_WLG)
l<-leslie.matrix(lx=diag(mat), mx=datX$fertilityrate_WLG)
ea <- eigen.analysis(l)
View(mat)
## Make sure your current working directory is the main folder:
setwd("/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/")
## Select the working directory for input files:
workingDir_Input <- "/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/PVA_Input/"
## Source the functions used in simulations below:
source("1. Function Definitions.R")
####################################################################################
############################ READ LIFE HISTORY TABLE ###############################
####################################################################################
setwd(workingDir_Input)
dat <- read.csv("Gorilla_LifeTables.csv")
dat$fertilityrate_2percent <- dat[,3]*.786
## fertility rates multiplied by factor less than 1 to get eigen values of 1.01 which corresponds to a 1% growth rate
dat$fertilityrate_1percent <- dat[,3]*.643
datX <- dat[,c(1,4:5)]
dat <- datX
mat <- matrix(0, nrow=nrow(dat), ncol=nrow(dat)) ## create square matrix with 0s everywhere
mat[1,] <- dat[,3] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat)-1, nrow=ncol(mat)-1)
diag(mat2) <- 1-dat[-nrow(dat),2] ## survival rates are assigned to just under the diagonal of a LM
mat[2:nrow(mat), 1:(ncol(mat)-1)] <- mat2
mat ## View and check matrix
library(demogR)
LM_mtn <- leslie.matrix(lx=diag(mat2), mx=dat$fertilityrate_WLG)
ea_mtn <- eigen.analysis(LM_mtn)
ea_mtn$lambda1
contrib.growth <- diag(mat2)*dat$fertilityrate_WLG[-1]      # lx*mx for each age class
Ro <- sum(contrib.growth)                         	# summed to get Ro
x.lxmx <- dat$age[-1]*contrib.growth                       # x*lx*mx for each age class
T <- sum(x.lxmx)/Ro
# T is generation time (summed and divided by Ro) // T=22 years for mountain gorilla dataset
r <- log(Ro)/T
r
dat <- read.csv("Gorilla_LifeTables.csv")
mat <- matrix(0, nrow=nrow(dat), ncol=nrow(dat)) ## create square matrix with 0s everywhere
mat[1,] <- dat[,3] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat)-1, nrow=ncol(mat)-1)
diag(mat2) <- 1-dat[-nrow(dat),2] ## survival rates are assigned to just under the diagonal of a LM
mat[2:nrow(mat), 1:(ncol(mat)-1)] <- mat2
mat ## View and check matrix
contrib.growth <- diag(mat2)*dat$fertilityrate[-1]      # lx*mx for each age class
Ro <- sum(contrib.growth)                         	# summed to get Ro
x.lxmx <- dat$age[-1]*contrib.growth                       # x*lx*mx for each age class
T <- sum(x.lxmx)/Ro
# T is generation time (summed and divided by Ro) // T=22 years for mountain gorilla dataset
r <- log(Ro)/T
r
View(dat)
contrib.growth <- diag(mat2)*dat$fertilityrate_MTN[-1]      # lx*mx for each age class
Ro <- sum(contrib.growth)                         	# summed to get Ro
x.lxmx <- dat$age[-1]*contrib.growth                       # x*lx*mx for each age class
T <- sum(x.lxmx)/Ro
# T is generation time (summed and divided by Ro) // T=22 years for mountain gorilla dataset
r <- log(Ro)/T
r
library(demogR)
LM_mtn <- leslie.matrix(lx=diag(mat2), mx=dat$fertilityrate)
ea_mtn <- eigen.analysis(LM_mtn)
ea_mtn$lambda1
setwd("/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/")
## If these directories do not exsit, run this:
dir.create("PVA_Output")
dir.create("PVA_Input")
dir.create("PVA_Output/Results")
dir.create("PVA_Output/LM_Projection")
dir.create("PVA_Output/IBM_Projection")
## Select the working directory for input files:
workingDir_Input <- "/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/PVA_Input/"
## Select the working directory for output files:
workingDir_Output <- "/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/PVA_Output/"
## DAMIEN !!!!! Your wd: ## Make sure to update as above!
## workingDir <- "~/Documents/git repositories/PVA_Tshiaberimu_R/"
## Source the functions used in simulations below:
source("1. Function Definitions.R")
####################################################################################
############################ READ LIFE HISTORY TABLE ###############################
####################################################################################
setwd(workingDir_Input)
## Your life history tables should have at least 3 columns: age, mortality rate, and fertility rate:
dat <- read.csv("Gorilla_LifeTables.csv")
dat$fertilityrate_2percent <- dat[,3]*.786
## fertility rates multiplied by factor less than 1 to get eigen values of 1.01 which corresponds to a 1% growth rate
dat$fertilityrate_1percent <- dat[,3]*.643
## fertility rates multiplied by factor less than 1 to get eigen values of 1.02 which corresponds to a 2% growth rate
##################################################################
############## Create an object that selects the LM ##############
##################################################################
selectLM <- read.csv("LeslieMatrix_WLG.csv")
###############################################################################
############## SET THE INITIAL CONDITIONS OF THE LM & IBM MODELS ##############
###############################################################################
## Reintroduction Scenarios:
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,c(1,4:5)] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 4.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 10 ## 10 for WLG, 8 for MTN
temp <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, temp[,51])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N) ## check if Nfinal is about the same as Nfinal_expected for the required lambda value
Nfinal_expected <- 1.032^50*30 ## Nfinal_expected = lambda^t*No (lambda for 3% = 1.032)
N_random <- rep(Nfinal$age, round(Nfinal$N)) ## create vector with individuals and their ages
N_random <- sample(N_random, size=100, replace = FALSE, prob = NULL) ## randomly sample 100 individuals in each age class
N_random <- data.frame(subset(N_random, N_random>weaningAge)) ## remove individuals younger than weaning age
colnames(N_random) <- "TestScenario"
growthRates <- data.frame(alpha_value = NA,
growth_rate = NA, lambda = NA)
## run the IBM projection
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
sum(Nfinal$N)
ReintroScenario[,11]
(1/100)*log(30/44)
(1/100)*log(44/30)
setwd("/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/")
## If these directories do not exsit, run this:
dir.create("PVA_Output")
dir.create("PVA_Input")
dir.create("PVA_Output/Results")
dir.create("PVA_Output/LM_Projection")
dir.create("PVA_Output/IBM_Projection")
## Select the working directory for input files:
workingDir_Input <- "/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/PVA_Input/"
## Select the working directory for output files:
workingDir_Output <- "/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/PVA_Output/"
## DAMIEN !!!!! Your wd: ## Make sure to update as above!
## workingDir <- "~/Documents/git repositories/PVA_Tshiaberimu_R/"
## Source the functions used in simulations below:
source("1. Function Definitions.R")
####################################################################################
############################ READ LIFE HISTORY TABLE ###############################
####################################################################################
setwd(workingDir_Input)
## Your life history tables should have at least 3 columns: age, mortality rate, and fertility rate:
dat <- read.csv("Gorilla_LifeTables.csv")
dat$fertilityrate_2percent <- dat[,3]*.786
## fertility rates multiplied by factor less than 1 to get eigen values of 1.01 which corresponds to a 1% growth rate
dat$fertilityrate_1percent <- dat[,3]*.643
## fertility rates multiplied by factor less than 1 to get eigen values of 1.02 which corresponds to a 2% growth rate
##################################################################
############## Create an object that selects the LM ##############
##################################################################
selectLM <- read.csv("LeslieMatrix_MTN_3%.csv")
###############################################################################
############## SET THE INITIAL CONDITIONS OF THE LM & IBM MODELS ##############
###############################################################################
## Reintroduction Scenarios:
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,1:3] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 3.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 8 ## 10 for WLG, 8 for MTN
temp <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, temp[,51])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N) ## check if Nfinal is about the same as Nfinal_expected for the required lambda value
Nfinal_expected <- 1.032^50*30 ## Nfinal_expected = lambda^t*No (lambda for 3% = 1.032)
N_random <- rep(Nfinal$age, round(Nfinal$N)) ## create vector with individuals and their ages
N_random <- sample(N_random, size=100, replace = FALSE, prob = NULL) ## randomly sample 100 individuals in each age class
N_random <- data.frame(subset(N_random, N_random>weaningAge)) ## remove individuals younger than weaning age
colnames(N_random) <- "TestScenario"
sum(Nfinal$N)
(1/100)*log(206/30)
temp[,51]
View(temp)
length(temp)
ncol(temp)
Nfinal <- data.frame(ReintroScenario$age, temp[,ncol(temp)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N)
(1/100)*log(1025/30)
ReintroScenario[,11]
selectLM <- read.csv("LeslieMatrix_WLG.csv")
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,c(1,4:5)] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 4.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 10 ## 10 for WLG, 8 for MTN
temp <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, temp[,ncol(temp)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N)
(1/100)*log(43/30)
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,c(1,4:5)] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 4.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 10 ## 10 for WLG, 8 for MTN
temp <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, temp[,ncol(temp)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N)
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,c(1,4:5)] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 4.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 10 ## 10 for WLG, 8 for MTN
temp <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, temp[,ncol(temp)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N)
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,c(1,4:5)] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 4.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 10 ## 10 for WLG, 8 for MTN
temp <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, temp[,ncol(temp)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N)
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,c(1,4:5)] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 4.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 10 ## 10 for WLG, 8 for MTN
temp <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, temp[,ncol(temp)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N)
(1/100)*log(43/30)
temp <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, temp[,ncol(temp)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N) ## check if Nfinal is about the same as Nfinal_expected for the required lambda value
Nfinal_expected <- 1.032^nyears*30 ## Nfinal_expected = lambda^t*No (lambda for 3% = 1.032)
N_random <- rep(Nfinal$age, round(Nfinal$N)) ## create vector with individuals and their ages
N_random <- sample(N_random, size=100, replace = FALSE, prob = NULL) ## randomly sample 100 individuals in each age class
N_random <- data.frame(subset(N_random, N_random>weaningAge)) ## remove individuals younger than weaning age
colnames(N_random) <- "TestScenario"
growthRates <- data.frame(alpha_value = NA,
growth_rate = NA, lambda = NA)
## run the IBM projection
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.10 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[840,])
##startPop <- rep(100,nruns) ## if using No at t=0
logLambda <- mean((1/30)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[1,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates <- growthRates[order(-growthRates$alpha_value),]
growthRates
finalPop
startPop
logLambda
log(finalPop/startPop))
log(finalPop/startPop)
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.42 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[840,])
##startPop <- rep(100,nruns) ## if using No at t=0
logLambda <- mean((1/30)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[1,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates <- growthRates[order(-growthRates$alpha_value),]
growthRates
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.30 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[840,])
##startPop <- rep(100,nruns) ## if using No at t=0
logLambda <- mean((1/30)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[2,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates <- growthRates[order(-growthRates$alpha_value),]
growthRates
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.50 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[840,])
##startPop <- rep(100,nruns) ## if using No at t=0
logLambda <- mean((1/30)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[3,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates <- growthRates[order(-growthRates$alpha_value),]
growthRates
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.60 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[840,])
##startPop <- rep(100,nruns) ## if using No at t=0
logLambda <- mean((1/30)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[4,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates <- growthRates[order(-growthRates$alpha_value),]
growthRates
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.45 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[840,])
##startPop <- rep(100,nruns) ## if using No at t=0
logLambda <- mean((1/30)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[5,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates <- growthRates[order(-growthRates$alpha_value),]
growthRates
setwd("/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/")
write.csv(growthRates, file="growthRates_WLG_100yrs_FINAL.csv", row.names=F)
