res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- rep(100,nruns)
logLambda <- mean((1/nyears)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[5,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
finalPop
startPop
res[400,]
res
res[480,]
res[601,]
res[nrow(res),]
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/nyears)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[5,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
growthRates <- data.frame(alpha_value = NA,
growth_rate = NA, lambda = NA)
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.85 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/nyears)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[1,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[1,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[360,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[2,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
as.numeric(res[360,])
as.numeric(res[480,])
logLambda <- mean((1/20)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[2,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[240,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/20)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[3,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[240,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/30)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[3,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.80 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[4,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.70 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[5,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.68 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[6,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.65 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[7,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.60 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[8,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.70 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[9,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.50 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[10,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
growthRates <- growthRates[order(-growthRates$alpha_value),]
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.40 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[11,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
## check
growthRates <- growthRates[order(-growthRates$alpha_value),]
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.30 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[12,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
## check
growthRates <- growthRates[order(-growthRates$alpha_value),]
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.35 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[13,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
## check
growthRates <- growthRates[order(-growthRates$alpha_value),]
growthRates
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.28 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.28 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[14,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
## check
growthRates <- growthRates[order(-growthRates$alpha_value),]
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.29 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[15,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
## check
growthRates <- growthRates[order(-growthRates$alpha_value),]
## change row to 15 for next alpha
growthRates
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.34 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[16,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates
## check
growthRates <- growthRates[order(-growthRates$alpha_value),]
growthRates
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.35 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[16,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates <- growthRates[order(-growthRates$alpha_value),]
growthRates
timeunit<-1/12
initalConditions <- convertToList(scenario = N_random, adultAge=adultAge, weaningAge=weaningAge) ## define initial conditions based on ages of females randomly sampled earlier in N_random
nruns <- 10
alpha <- 0.35 ## set alpha value
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
##write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
finalPop <- as.numeric(res[nrow(res),])
startPop <- as.numeric(res[480,])
##startPop <- rep(100,nruns)
logLambda <- mean((1/10)*log(finalPop/startPop)) ## nyears for the census time period, loglambda = 1/timeperiod*log(Ntfinal)/Nt0
lambda <- exp(logLambda)
growthRates[17,1:3] <- c(alpha, round(logLambda, digits=3), round(lambda, digits=3))
growthRates <- growthRates[order(-growthRates$alpha_value),]
growthRates
getwd()
,
write.csv(growthRates, file=paste0("pva_projection_IBM","growthRates.csv"), row.names=F)
write.csv(growthRates, file=paste0("pva_projection_IBM/growthRates.csv"), row.names=F)
workingDir <- "/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/"
setwd(workingDir)
workingDir_Results <- ("/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/pva_extn_results/")
##workingDir <- "~/Documents/git repositories/PVA_Tshiaberimu_R/"
## Source the functions used in simulations below:
source("1. Function Definitions.R")
dat <- read.csv(paste0(workingDir, "Gorilla_LifeTables.csv"))
dat$fertilityrate_2percent <- dat[,3]*.786
## fertility rates multiplied by factor less than 1 to get eigen values of 1.01 which corresponds to a 1% growth rate
dat$fertilityrate_1percent <- dat[,3]*.643
## fertility rates multiplied by factor less than 1 to get eigen values of 1.02 which corresponds to a 2% growth rate
dat <- read.csv("Gorilla_LifeTables.csv")
dat$fertilityrate_2percent <- dat[,3]*.786
## fertility rates multiplied by factor less than 1 to get eigen values of 1.01 which corresponds to a 1% growth rate
dat$fertilityrate_1percent <- dat[,3]*.643
## fertility rates multiplied by factor less than 1 to get eigen values of 1.02 which corresponds to a 2% growth rate
leslieMatrix(lifetable=dat[,1:3], filename=paste0(workingDir,"LeslieMatrix_MTN_3%.csv"))
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
ReintroScenario_IBM <- read.csv("ReintroductionScenarios_IBM.csv") ## csv file with Reintroduction Scenarios for IBM
mat <- as.matrix(read.csv("LeslieMatrix_WLG.csv")) ## csv file with appropriate Leslie Matrix (needs to be converted to matrix object!)
nyears <- 50 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
View(mat)
mat <- as.matrix(read.csv("LeslieMatrix_MTN_2%.csv")) ## csv file with appropriate Leslie Matrix (needs to be converted to matrix object!)
nyears <- 50 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
datX <- dat[,1:3] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 3.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 8 ## 10 for WLG, 8 for MTN
alpha <- 0.35 ## function of the fertility rate
initalConditions <- convertToList(scenario = ReintroScenario_IBM, adultAge=adultAge, weaningAge=weaningAge)
projectPop <- for(i in 2:ncol(ReintroScenario)){
No <- ReintroScenario[,i] ## Get the reintroduction scenario
N <- pop_projection(tfinal=nyears, LM=mat, No=No) ## Apply pop_projection function to No for this scenario
scenario <- strsplit(colnames(ReintroScenario)[i], "_")[[1]][2] ## Get the last element of the column name for each reintroducion scenario
det <- assign(paste0("N_projected_det", scenario), apply(N,2,sum))  ## The assign function takes a variable name as a character string and assigns a value to it. In this case, the values are N at each time step of the projection
write.csv(det, file=paste0("pva_projection_LM/LM_Det_Scenario", i-1, ".csv"), row.names=F)
}
## Second, use the stochastic function:
temp <- matrix(0, nrow=nyears+1, ncol=nruns)
## create an empty matrix that will save the number of individuals for each year of the projection for each run of the LM projection
for(j in 1:length(ReintroScenario)){
for(i in 1:nruns) {
temp[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,j+1]),2,sum)
}
write.csv(temp, file=paste0("pva_projection_LM/LM_Scenario", j,".csv"), row.names=F)
}
getwd()
View(ReintroScenario)
res <- matrix(0, nrow=trunc(nyears/timeunit)+1, ncol=nruns)
for(j in 1:length(initalConditions)){
for(i in 1:nruns){
print(i)
abmDataLog <- simTshia(ages0 = initalConditions[[j]][,1], status0 = initalConditions[[j]][,2], time0 = initalConditions[[j]][,3], nyears=nyears, alpha=alpha, timeunit=timeunit, verbose=F)
nindiv <- tapply(abmDataLog$status,abmDataLog$timestep, function(v) length(v)+rbinom(1, sum(v=="L"), .5))##we're adding the unweaned females
res[1:length(nindiv),i] <- nindiv
}
write.csv(res, file=paste0("pva_projection_IBM/IBM_Scenario", j,".csv"), row.names=F)
}
