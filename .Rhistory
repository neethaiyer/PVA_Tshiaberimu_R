mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
datX <- dat[,1:3] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 3.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 8 ## 10 for WLG, 8 for MTN
N <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, N[,ncol(N)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N) ## check if Nfinal is about the same as Nfinal_expected for the required lambda value
Nfinal_total <- data.frame(c(0:100), apply(N,2,sum))
colnames(Nfinal_total) <- c("year","N")
lambdaPop <- Nfinal_total[2:101,2]/Nfinal_total[1:100,2]
lambda <- mean(lambdaPop[50:100]) ## lambda is about 0.999 for western gorillas
lambda <- Re(eigen(mat)$value[1]) ## can calulate via eigenvector of LM also
growthRate <- log(lambda)
lambda
growthRate
selectLM <- read.csv("LeslieMatrix_MTN_2%.csv")
ReintroScenario <- read.csv("ReintroductionScenarios_LM_alpha.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,1:3] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 3.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 8 ## 10 for WLG, 8 for MTN
N <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, N[,ncol(N)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N) ## check if Nfinal is about the same as Nfinal_expected for the required lambda value
Nfinal_total <- data.frame(c(0:100), apply(N,2,sum))
colnames(Nfinal_total) <- c("year","N")
lambdaPop <- Nfinal_total[2:101,2]/Nfinal_total[1:100,2]
lambda <- mean(lambdaPop[50:100]) ## lambda is about 0.999 for western gorillas
lambda <- Re(eigen(mat)$value[1]) ## can calulate via eigenvector of LM also
growthRate <- log(lambda) ## growth rate is about 0.001 for western gorillas
lambda
growthRate
dat <- read.csv("Gorilla_LifeTables.csv")
dat$fertilityrate_2percent <- dat[,3]*.788
## fertility rates multiplied by factor less than 1 to get eigen values of 1.01 which corresponds to a 1% growth rate
dat$fertilityrate_1percent <- dat[,3]*.642
## fertility rates multiplied by factor less than 1 to get eigen values of 1.02 which corresponds to a 2% growth rate
####################################################################################
################# OPTIONAL: CREATE CSV FILES with LESLIE MATRICES ##################
####################################################################################
## If you don't already have Leslie Matrices, create using the function leslieMatrix. Make sure you select the correct columns in your Life Table file (you need: age, mortality rate, and fertility rate):
leslieMatrix(lifetable=dat[,1:3], filename="LeslieMatrix_MTN_3%.csv")
leslieMatrix(lifetable=dat[,c(1:2, 6)], filename="LeslieMatrix_MTN_2%.csv")
leslieMatrix(lifetable=dat[,c(1:2, 7)], filename="LeslieMatrix_MTN_1%.csv")
selectLM <- read.csv("LeslieMatrix_MTN_2%.csv")
ReintroScenario <- read.csv("ReintroductionScenarios_LM_alpha.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,1:3] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 3.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 8 ## 10 for WLG, 8 for MTN
N <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, N[,ncol(N)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N) ## check if Nfinal is about the same as Nfinal_expected for the required lambda value
Nfinal_total <- data.frame(c(0:100), apply(N,2,sum))
colnames(Nfinal_total) <- c("year","N")
lambdaPop <- Nfinal_total[2:101,2]/Nfinal_total[1:100,2]
lambda <- mean(lambdaPop[50:100]) ## lambda is about 0.999 for western gorillas
lambda <- Re(eigen(mat)$value[1]) ## can calulate via eigenvector of LM also
growthRate <- log(lambda) ## growth ra
lambda
growthRate
selectLM <- read.csv("LeslieMatrix_MTN_1%.csv")
###############################################################################
############## SET THE INITIAL CONDITIONS OF THE LM & IBM MODELS ##############
###############################################################################
## Reintroduction Scenarios:
ReintroScenario <- read.csv("ReintroductionScenarios_LM_alpha.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,1:3] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 3.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 8 ## 10 for WLG, 8 for MTN
N <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, N[,ncol(N)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N) ## check if Nfinal is about the same as Nfinal_expected for the required lambda value
Nfinal_total <- data.frame(c(0:100), apply(N,2,sum))
colnames(Nfinal_total) <- c("year","N")
lambdaPop <- Nfinal_total[2:101,2]/Nfinal_total[1:100,2]
lambda <- mean(lambdaPop[50:100]) ## lambda is about 0.999 for western gorillas
lambda <- Re(eigen(mat)$value[1]) ## can calulate via eigenvector of LM also
growthRate <- log(lambda) #
lambda
growthRate
dat <- read.csv("Gorilla_LifeTables.csv")
dat$fertilityrate_2percent <- dat[,3]*.789
## fertility rates multiplied by factor less than 1 to get eigen values of 1.01 which corresponds to a 1% growth rate
dat$fertilityrate_1percent <- dat[,3]*.644
## fertility rates multiplied by factor less than 1 to get eigen values of 1.02 which corresponds to a 2% growth rate
####################################################################################
################# OPTIONAL: CREATE CSV FILES with LESLIE MATRICES ##################
####################################################################################
## If you don't already have Leslie Matrices, create using the function leslieMatrix. Make sure you select the correct columns in your Life Table file (you need: age, mortality rate, and fertility rate):
leslieMatrix(lifetable=dat[,1:3], filename="LeslieMatrix_MTN_3%.csv")
leslieMatrix(lifetable=dat[,c(1:2, 6)], filename="LeslieMatrix_MTN_2%.csv")
leslieMatrix(lifetable=dat[,c(1:2, 7)], filename="LeslieMatrix_MTN_1%.csv")
leslieMatrix(lifetable=dat[,c(1, 4:5)], filename="LeslieMatrix_WLG.csv")
selectLM <- read.csv("LeslieMatrix_MTN_1%.csv")
###############################################################################
############## SET THE INITIAL CONDITIONS OF THE LM & IBM MODELS ##############
###############################################################################
## Reintroduction Scenarios:
ReintroScenario <- read.csv("ReintroductionScenarios_LM_alpha.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,1:3] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 3.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 8 ## 10 for WLG, 8 for MTN
N <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, N[,ncol(N)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N) ## check if Nfinal is about the same as Nfinal_expected for the required lambda value
Nfinal_total <- data.frame(c(0:100), apply(N,2,sum))
colnames(Nfinal_total) <- c("year","N")
lambdaPop <- Nfinal_total[2:101,2]/Nfinal_total[1:100,2]
lambda <- mean(lambdaPop[50:100]) ## lambda is about 0.999 for western gorillas
lambda <- Re(eigen(mat)$value[1]) ## can calulate via eigenvector of LM also
growthRate <- log(lambda)
lambda
growthRate
selectLM <- read.csv("LeslieMatrix_MTN_2%.csv")
###############################################################################
############## SET THE INITIAL CONDITIONS OF THE LM & IBM MODELS ##############
###############################################################################
## Reintroduction Scenarios:
ReintroScenario <- read.csv("ReintroductionScenarios_LM_alpha.csv") ## csv file with Reintroduction Scenarios for LM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 100 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,1:3] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 3.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 8 ## 10 for WLG, 8 for MTN
N <- pop_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,11]) ## run the LM projection
Nfinal <- data.frame(ReintroScenario$age, N[,ncol(N)])
colnames(Nfinal) <- c("age","N")
sum(Nfinal$N) ## check if Nfinal is about the same as Nfinal_expected for the required lambda value
Nfinal_total <- data.frame(c(0:100), apply(N,2,sum))
colnames(Nfinal_total) <- c("year","N")
lambdaPop <- Nfinal_total[2:101,2]/Nfinal_total[1:100,2]
lambda <- mean(lambdaPop[50:100]) ## lambda is about 0.999 for western gorillas
lambda <- Re(eigen(mat)$value[1]) ## can calulate via eigenvector of LM also
growthRate <- log(lambda) ## growth rate is about 0.001 for western gorillas
## 2%: lambda = 1.020301, r = 0.02009759, k = 0.79
## 1%: lambda = 1.010051, r = 0.01000077
lambda
growthRate
matplot(1:100, lambdaPop, type="o", pch=20, col=1, xlab="Years", ylab="Lambda", main="Lambda values for Western gorillas (No=100)")
selectLM <- read.csv("LeslieMatrix_MTN_3%.csv")
## Reintroduction Scenarios:
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
ReintroScenario_IBM <- read.csv("ReintroductionScenarios_IBM.csv") ## csv file with Reintroduction Scenarios for IBM
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
ReintroScenario_IBM <- read.csv("ReintroductionScenarios_IBM.csv") ## csv file with Reintroduction Scenarios for IBM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM)
nyears <- 50 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,1:3] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 3.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 8 ## 10 for WLG, 8 for MTN
## Depending on the adult female age and weaning age, create a list with the starting conditions for each scenario of the IBM
initalConditions <- convertToList(scenario = ReintroScenario_IBM, adultAge=adultAge, weaningAge=weaningAge)
#####################################################################################
##################### PART 1: Leslie Matrix model (Simple PVA) ######################
#####################################################################################
setwd(workingDir_Output)
projectPop <- for(i in 2:ncol(ReintroScenario)){
No <- ReintroScenario[,i] ## Get the reintroduction scenario
N <- pop_projection(tfinal=nyears, LM=mat, No=No) ## Apply pop_projection function to No for this scenario
scenario <- strsplit(colnames(ReintroScenario)[i], "_")[[1]][2] ## Get the last element of the column name for each reintroducion scenario
det <- assign(paste0("N_projected_det", scenario), apply(N,2,sum))  ## The assign function takes a variable name as a character string and assigns a value to it. In this case, the values are N at each time step of the projection
write.csv(det, file=paste0("LM_Projection/LM_Det_Scenario", i-1, ".csv"), row.names=F)
}
temp <- matrix(0, nrow=nyears+1, ncol=nruns)
for(j in 1:(length(ReintroScenario)-1)){
for(i in 1:nruns) {
temp[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,j+1]),2,sum)
}
write.csv(temp, file=paste0("LM_Projection/LM_Stoch_Scenario", j,".csv"), row.names=F)
}
selectLM <- read.csv("LeslieMatrix_MTN_2%.csv")
####################################################################################
############################ READ LIFE HISTORY TABLE ###############################
####################################################################################
setwd(workingDir_Input)
selectLM <- read.csv("LeslieMatrix_MTN_2%.csv")
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
ReintroScenario_IBM <- read.csv("ReintroductionScenarios_IBM.csv") ## csv file with Reintroduction Scenarios for IBM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 50 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,1:3] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 3.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 8
## Depending on the adult female age and weaning age, create a list with the starting conditions for each scenario of the IBM
initalConditions <- convertToList(scenario = ReintroScenario_IBM, adultAge=adultAge, weaningAge=weaningAge)
#####################################################################################
##################### PART 1: Leslie Matrix model (Simple PVA) ######################
#####################################################################################
setwd(workingDir_Output)
projectPop <- for(i in 2:ncol(ReintroScenario)){
No <- ReintroScenario[,i] ## Get the reintroduction scenario
N <- pop_projection(tfinal=nyears, LM=mat, No=No) ## Apply pop_projection function to No for this scenario
scenario <- strsplit(colnames(ReintroScenario)[i], "_")[[1]][2] ## Get the last element of the column name for each reintroducion scenario
det <- assign(paste0("N_projected_det", scenario), apply(N,2,sum))  ## The assign function takes a variable name as a character string and assigns a value to it. In this case, the values are N at each time step of the projection
write.csv(det, file=paste0("LM_Projection/LM_Det_Scenario", i-1, ".csv"), row.names=F)
}
## Second, use the stochastic function:
## create an empty matrix that will save the number of individuals for each year of the projection for each run of the LM projection
temp <- matrix(0, nrow=nyears+1, ncol=nruns)
for(j in 1:(length(ReintroScenario)-1)){
for(i in 1:nruns) {
temp[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,j+1]),2,sum)
}
write.csv(temp, file=paste0("LM_Projection/LM_Stoch_Scenario", j,".csv"), row.names=F)
}
##################################################################
############## Create an object that selects the LM ##############
##################################################################
setwd(workingDir_Input)
selectLM <- read.csv("LeslieMatrix_MTN_1%.csv")
ReintroScenario <- read.csv("ReintroductionScenarios_LM.csv") ## csv file with Reintroduction Scenarios for LM
ReintroScenario_IBM <- read.csv("ReintroductionScenarios_IBM.csv") ## csv file with Reintroduction Scenarios for IBM
## Leslie Matrix parameters:
mat <- as.matrix(selectLM) ## LM needs to be converted to matrix object!
## Time parameters:
nyears <- 50 ## Projection Period
nruns <- 1000 ## Number of simulations to run
timeunit <- 1/12 ## timestep for IBM
## Initial demographic parameters: survivorship, fertility, and weaning age
datX <- dat[,1:3] ## Subset appropriate life history columns: dat[,c(1,4:5)] for WLG, dat[,1:3] for MTN
## NOTE: this subsetting is needed because columns for dat are specified in FUNCTIONS 8 and 9
weaningAge <- 3.5 ## 4.5 for WLG, 3.5 for MTN
adultAge <- 8 ## 10 for WLG, 8 for MTN
initalConditions <- convertToList(scenario = ReintroScenario_IBM, adultAge=adultAge, weaningAge=weaningAge)
#####################################################################################
##################### PART 1: Leslie Matrix model (Simple PVA) ######################
#####################################################################################
setwd(workingDir_Output)
###############################################################################
######################### RUN THE LESLIE MATRIX MODELS ########################
###############################################################################
## Apply LM projection functions using each reintrodcution scenario
## First, use the deterministic function:
projectPop <- for(i in 2:ncol(ReintroScenario)){
No <- ReintroScenario[,i] ## Get the reintroduction scenario
N <- pop_projection(tfinal=nyears, LM=mat, No=No) ## Apply pop_projection function to No for this scenario
scenario <- strsplit(colnames(ReintroScenario)[i], "_")[[1]][2] ## Get the last element of the column name for each reintroducion scenario
det <- assign(paste0("N_projected_det", scenario), apply(N,2,sum))  ## The assign function takes a variable name as a character string and assigns a value to it. In this case, the values are N at each time step of the projection
write.csv(det, file=paste0("LM_Projection/LM_Det_Scenario", i-1, ".csv"), row.names=F)
}
## Second, use the stochastic function:
## create an empty matrix that will save the number of individuals for each year of the projection for each run of the LM projection
temp <- matrix(0, nrow=nyears+1, ncol=nruns)
for(j in 1:(length(ReintroScenario)-1)){
for(i in 1:nruns) {
temp[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=ReintroScenario[,j+1]),2,sum)
}
write.csv(temp, file=paste0("LM_Projection/LM_Stoch_Scenario", j,".csv"), row.names=F)
}
setwd(workingDir_Output)
workingDir_LM <- "LM_Projection_50year_mtn_3%"
setwd(workingDir_LM)
allScenarioFiles <- list.files(pattern="LM_Stoch.*\\.csv")
results_LM <- data.frame(scenario = as.factor(LETTERS[1:length(allScenarioFiles)]),
prob_50 = NA, extn_Risk = NA)
index <- 0
for(i in 1:length(allScenarioFiles)){
index <- index+1
tempx <- as.matrix(read.csv(allScenarioFiles[[i]]))
ext <- tempx[nrow(tempx),]==0
extRisk <- mean(ext)
probNe_50 <- mean(tempx[nrow(tempx),]>=50)
results_LM[index,2:3] <- c(probNe_50, extRisk)*100
}
setwd(workingDir_Output)
write.csv(results_LM, file="Results/Results_LM_mtn_3%.csv", row.names=F)
setwd(workingDir_Output)
## Select the correct folder:
##workingDir_LM <- "LM_Projection_50year_mtn_3%"
workingDir_LM <- "LM_Projection_50year_mtn_2%"
setwd(workingDir_LM)
allScenarioFiles <- list.files(pattern="LM_Stoch.*\\.csv")
## Calculate the extinction risk at the end of 50 years for all nruns of simulation.
## Calculate the likelihood that the population reaches at least 50 individuals within 50 years.
results_LM <- data.frame(scenario = as.factor(LETTERS[1:length(allScenarioFiles)]),
prob_50 = NA, extn_Risk = NA)
index <- 0
for(i in 1:length(allScenarioFiles)){
index <- index+1
tempx <- as.matrix(read.csv(allScenarioFiles[[i]]))
ext <- tempx[nrow(tempx),]==0
extRisk <- mean(ext)
probNe_50 <- mean(tempx[nrow(tempx),]>=50)
results_LM[index,2:3] <- c(probNe_50, extRisk)*100
}
setwd(workingDir_Output)
## Write csv files to save the results:
##write.csv(results_LM, file="Results/Results_LM_mtn_3%.csv", row.names=F)
write.csv(results_LM, file="Results/Results_LM_mtn_2%.csv", row.names=F)
workingDir_LM <- "LM_Projection_50year_mtn_1%"
setwd(workingDir_LM)
allScenarioFiles <- list.files(pattern="LM_Stoch.*\\.csv")
## Calculate the extinction risk at the end of 50 years for all nruns of simulation.
## Calculate the likelihood that the population reaches at least 50 individuals within 50 years.
results_LM <- data.frame(scenario = as.factor(LETTERS[1:length(allScenarioFiles)]),
prob_50 = NA, extn_Risk = NA)
index <- 0
for(i in 1:length(allScenarioFiles)){
index <- index+1
tempx <- as.matrix(read.csv(allScenarioFiles[[i]]))
ext <- tempx[nrow(tempx),]==0
extRisk <- mean(ext)
probNe_50 <- mean(tempx[nrow(tempx),]>=50)
results_LM[index,2:3] <- c(probNe_50, extRisk)*100
}
setwd(workingDir_Output)
write.csv(results_LM, file="Results/Results_LM_mtn_1%.csv", row.names=F)
###############################################################################
################# CREATE CSV FILES FOR FINAL POPULATION SIZES #################
###############################################################################
setwd(workingDir_Output)
workingDir_LM <- "LM_Projection_50year_mtn_3%"
setwd(workingDir_LM)
allScenarioFiles <- list.files(pattern="*.csv")
for (i in 1:length(allScenarioFiles)){
assign(allScenarioFiles[i],
read.csv(allScenarioFiles[i], header=TRUE)
)}
stochObjects <- c("LM_Stoch_Scenario1.csv","LM_Stoch_Scenario2.csv","LM_Stoch_Scenario3.csv","LM_Stoch_Scenario4.csv","LM_Stoch_Scenario5.csv","LM_Stoch_Scenario6.csv","LM_Stoch_Scenario7.csv","LM_Stoch_Scenario8.csv","LM_Stoch_Scenario9.csv")
nruns <- 1000
Nfinal <- data.frame(matrix(ncol=length(stochObjects), nrow=nruns))
colnames(Nfinal) <- LETTERS[1:length(stochObjects)]
index <- 0
for(j in 1:length(stochObjects)){
index<-index+1
resX <- get(stochObjects[j])
Nfinal[,j] <- as.numeric(resX[nrow(resX),])
}
write.csv(Nfinal, file="Results/Results_LM_Nfinal_mtn_3%.csv", row.names=F)
setwd(workingDir_Output)
write.csv(Nfinal, file="Results/Results_LM_Nfinal_mtn_3%.csv", row.names=F)
workingDir_LM <- "LM_Projection_50year_mtn_2%"
setwd(workingDir_LM)
allScenarioFiles <- list.files(pattern="*.csv")
for (i in 1:length(allScenarioFiles)){
assign(allScenarioFiles[i],
read.csv(allScenarioFiles[i], header=TRUE)
)}
stochObjects <- c("LM_Stoch_Scenario1.csv","LM_Stoch_Scenario2.csv","LM_Stoch_Scenario3.csv","LM_Stoch_Scenario4.csv","LM_Stoch_Scenario5.csv","LM_Stoch_Scenario6.csv","LM_Stoch_Scenario7.csv","LM_Stoch_Scenario8.csv","LM_Stoch_Scenario9.csv")
nruns <- 1000
Nfinal <- data.frame(matrix(ncol=length(stochObjects), nrow=nruns))
colnames(Nfinal) <- LETTERS[1:length(stochObjects)]
index <- 0
for(j in 1:length(stochObjects)){
index<-index+1
resX <- get(stochObjects[j])
Nfinal[,j] <- as.numeric(resX[nrow(resX),])
}
setwd(workingDir_Output)
write.csv(Nfinal, file="Results/Results_LM_Nfinal_mtn_2%.csv", row.names=F)
###############################################################################
################# CREATE CSV FILES FOR FINAL POPULATION SIZES #################
###############################################################################
setwd(workingDir_Output)
workingDir_LM <- "LM_Projection_50year_mtn_1%"
setwd(workingDir_LM)
allScenarioFiles <- list.files(pattern="*.csv")
for (i in 1:length(allScenarioFiles)){
assign(allScenarioFiles[i],
read.csv(allScenarioFiles[i], header=TRUE)
)}
stochObjects <- c("LM_Stoch_Scenario1.csv","LM_Stoch_Scenario2.csv","LM_Stoch_Scenario3.csv","LM_Stoch_Scenario4.csv","LM_Stoch_Scenario5.csv","LM_Stoch_Scenario6.csv","LM_Stoch_Scenario7.csv","LM_Stoch_Scenario8.csv","LM_Stoch_Scenario9.csv")
nruns <- 1000
Nfinal <- data.frame(matrix(ncol=length(stochObjects), nrow=nruns))
colnames(Nfinal) <- LETTERS[1:length(stochObjects)]
index <- 0
for(j in 1:length(stochObjects)){
index<-index+1
resX <- get(stochObjects[j])
Nfinal[,j] <- as.numeric(resX[nrow(resX),])
}
setwd(workingDir_Output)
write.csv(Nfinal, file="Results/Results_LM_Nfinal_mtn_1%.csv", row.names=F)
workingDir <- "/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/"
setwd(workingDir)
workingDir_Output <- "/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/PVA_Output/"
workingDir_Input <- "/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/PVA_Input/"
workingDir_Figures <- "/Users/neethaiyer/Desktop/PVA_Tshiaberimu_R/PVA_Figures/"
##workingDir <- "~/Documents/git repositories/PVA_Tshiaberimu_R/"
## Let's pick our colors for MTN and WLG and include a transparency factor; note that these are only used for the bargraph below:
coral <- rgb(250, 128, 114, alpha=150, maxColorValue = 255) ## for WLG
azure4 <- rgb(131, 139, 139, alpha=150, maxColorValue = 255) ## for MTN
colfun <- colorRampPalette(c("azure4", "coral"))
colfun(4)
colMTN3_alpha <- rgb(37, 37, 37, alpha=150, maxColorValue = 255)
colMTN2_alpha <- rgb(99, 99, 99, alpha=150, maxColorValue = 255)
colMTN1_alpha <- rgb(150, 150, 150, alpha=150, maxColorValue = 255)
colWLG_alpha <- rgb(189, 189, 189, alpha=150, maxColorValue = 255)
colMTN3 <- "#252525"
## B. Color for MTN with 2% growth rate
##colMTN2 <- "#AC8777"
colMTN2 <- "#636363"
## C. Color for MTN with 1% growth rate
##colMTN1 <- "#D58363"
colMTN1 <- "#969696"
## D. Color for WLG
##colWLG <- "#FF7F50"
colWLG <- "#bdbdbd"
## Color for N=50 mark
colN50 <- "#de2d26"
## Read all csv files:
dat <- read.csv(paste0(workingDir_Input, "Gorilla_LifeTables.csv")) ## life tables
mtn_3per_lm <- read.csv(paste0(workingDir_Output,"Results/Results_LM_mtn_3%.csv"))
mtn_2per_lm <- read.csv(paste0(workingDir_Output,"Results/Results_LM_mtn_2%.csv"))
mtn_1per_lm <- read.csv(paste0(workingDir_Output,"Results/Results_LM_mtn_1%.csv"))
finalPop1 <- read.csv(paste0(workingDir_Output,"Results/Results_LM_Nfinal_mtn_3%.csv"))
finalPop2 <- read.csv(paste0(workingDir_Output,"Results/Results_LM_Nfinal_mtn_2%.csv"))
finalPop3 <- read.csv(paste0(workingDir_Output,"Results/Results_LM_Nfinal_mtn_1%.csv"))
plot(mtn_1per_lm$extn_Risk, bg=colMTN1, type="b", pch=22, xlab=NA, ylab=NA, xlim=c(1,9), ylim=c(0,80), xaxt="n", yaxt = "n")
plot(mtn_2per_lm$extn_Risk, bg=colMTN2, type="b", pch=23, xlab=NA, ylab=NA, xlim=c(1,9), ylim=c(0,80), xaxt="n", yaxt = "n")
plot(mtn_3per_lm$extn_Risk, bg=colMTN3, type="b", pch=24, xlab=NA, ylab=NA, xlim=c(1,9), ylim=c(0,80), xaxt="n", yaxt = "n")
boxplot(finalPop3$A, finalPop3$B, finalPop3$C, finalPop3$D, finalPop3$E, finalPop3$F, finalPop3$G, finalPop3$H, finalPop3$I, names=LETTERS[1:9], pch=15, col=colMTN1, outcol=colMTN1_alpha, varwidth=FALSE, medlwd=1, medcol="white", boxlty=1, whisklty=1, staplelty=0, ylim=c(0,220), yaxt = "n")
boxplot(finalPop2$A, finalPop2$B, finalPop2$C, finalPop2$D, finalPop2$E, finalPop2$F, finalPop2$G, finalPop2$H, finalPop2$I, names=LETTERS[1:9], pch=18, col=colMTN2, outcol=colMTN2_alpha, varwidth=FALSE, medlwd=1, medcol="white", boxlty=1, whisklty=1, staplelty=0, ylim=c(0,220), yaxt = "n")
boxplot(finalPop1$A, finalPop1$B, finalPop1$C, finalPop1$D, finalPop1$E, finalPop1$F, finalPop1$G, finalPop1$H, finalPop1$I, names=LETTERS[1:9], pch=17, col=colMTN3, outcol=colMTN3_alpha, varwidth=FALSE, medlwd=1, medcol="white", boxlty=1, whisklty=1, staplelty=0, ylim=c(0,220), yaxt = "n")
growthRates1 <- read.csv("growthRates_LM2%.csv")
growthRates2 <- read.csv("growthRates_LM2%.csv")
growthRates3 <- read.csv("growthRates_LM3%.csv")
loessMod60 <- loess(growthRates2[,1:2], span=0.60)
loessMod50 <- loess(growthRates2[,1:2], span=0.50)
loessMod40 <- loess(growthRates2[,1:2], span=0.40)
smoothed60 <- predict(loessMod60)
smoothed50 <- predict(loessMod50)
smoothed40 <- predict(loessMod40)
calcSSE <- function(x){
loessMod <- try(loess(uempmed ~ index, data=growthRates2, span=x), silent=T)
res <- try(loessMod$residuals, silent=T)
if(class(res)!="try-error"){
if((sum(res, na.rm=T) > 0)){
sse <- sum(res^2)
}
}else{
sse <- 99999
}
return(sse)
}
bestSPAN <- optim(par=c(0.5), calcSSE, method="SANN")
loessModBEST <- loess(growthRates2[,1:2], span=bestSPAN$value)
smoothedBEST <- predict(loessModBEST)
plot(growthRates2[,1:2], col=2)
abline(lm(growthRates2[,2]~growthRates2[,1]), col=2)
lines(smoothed40, growthRates2$growth_rate, col=3, lty=2)
lines(smoothed50, growthRates2$growth_rate, col=3, lty=2)
lines(smoothed60, growthRates2$growth_rate, col=3, lty=2)
lines(smoothedBEST, growthRates2$growth_rate, col=4, lty=1)
plot(growthRates2[,1:2], col=2)
lines(smoothedBEST, growthRates2$growth_rate, col=4, lty=1)
abline(lm(growthRates2[,2]~growthRates2[,1]), col=2)
locator()
locator()
locator()
locator()
locator()
locator()
locator()
