plot(g, vertex.color= "darkorange1", vertex.label.color= "darkblue", edge.width= .2, edge.lty=1, lable.font.size= 5,vertex.size=8, vertex.frame.color="blue", edge.width=20,layout=layout_with_dh, edge.arrow.size=.2, edge.color="cornflowerblue")
plot(g, vertex.color= "darkorange1", vertex.label.color= "white", edge.width= .2, edge.lty=1, lable.font.size= 5,vertex.size=8, vertex.frame.color="blue", edge.width=20,layout=layout_with_dh, edge.arrow.size=.2, edge.color="cornflowerblue")
plot(g, vertex.color= "darkorange1", vertex.label.color= "white", edge.width= .2, edge.lty=1, label.font.size= 5,vertex.size=8, vertex.frame.color="blue", edge.width=20,layout=layout_with_dh, edge.arrow.size=.2, edge.color="cornflowerblue")
plot(g, vertex.color= "darkorange1", vertex.label.color= "white", edge.width= .2, edge.lty=1, label.font.size=10,vertex.size=8, vertex.frame.color="blue", edge.width=20,layout=layout_with_dh, edge.arrow.size=.2, edge.color="cornflowerblue")
plot(g, vertex.color= "darkorange1", vertex.label.color= "white", edge.width= 20, edge.lty=1, label.font.size=10,vertex.size=8, vertex.frame.color="blue",layout=layout_with_dh, edge.arrow.size=.2, edge.color="cornflowerblue")
plot(g, vertex.color= "darkorange1", vertex.label.color= "white", edge.width= 2, edge.lty=1, label.font.size=10,vertex.size=8, vertex.frame.color="blue",layout=layout_with_dh, edge.arrow.size=.2, edge.color="cornflowerblue")
plot(g, vertex.color= "darkorange1", vertex.label.color= "white", edge.width= 2, edge.lty=1, label.font.size=10,vertex.size=10, vertex.frame.color="blue",layout=layout_with_dh, edge.arrow.size=.2, edge.color="cornflowerblue")
plot(g, vertex.color= "darkorange1", vertex.label.color= "white", edge.width= 2, edge.lty=1, label.font.size=10,vertex.size=20, vertex.frame.color="blue",layout=layout_with_dh, edge.arrow.size=.2, edge.color="cornflowerblue")
plot(g, vertex.color= "darkorange1", vertex.label.color= "white", edge.width= 2, edge.lty=1, label.font.size=10,vertex.size=20, vertex.frame.color="blue",layout=layout_with_dh, edge.arrow.size=0.8, edge.color="cornflowerblue")
plot(g, vertex.color= "darkorange1", vertex.label.color= "white", edge.width= 2, edge.lty=1, label.font.size=10,vertex.size=10, vertex.frame.color="blue",layout=layout_with_dh, edge.arrow.size=0.8, edge.color="cornflowerblue")
plot(g, vertex.color= "darkorange1", vertex.label.color= "white", edge.width= 2, edge.lty=1, label.font.size=10,vertex.size=10, vertex.frame.color="blue",layout=layout_with_dh, edge.arrow.size=2, edge.color="cornflowerblue")
plot(g, vertex.color= "darkorange1", vertex.lable.color= "darkblue", edge.width= .2, edge.lty=1, lable.font.size= 12,vertex.size=12, vertex.frame.color="black", edge.width= 4,layout=layout_with_dh, edge.arrow.size=.2, edge.color="cornflowerblue")
knitr::opts_knit$set(root.dir = '/Users/neethaiyer/Box Sync/Courses_S19/ANT191_S19/Assignment1_ANT191_S19/Assignments_ANT191_S19/Assignment2_ANT191_S19' )
library(igraph)
dat <- read.csv("edge list.csv", header=TRUE) ## load the csv file
plot(g,vertex.color="green",edge.color="gray",vertex.label.cex=0.5,vertex.label.color="black",vertex.siz
e=8,vertex.shape="sphere",edge.arrow.size=.5)
plot(g,vertex.color="green",edge.color="gray",vertex.label.cex=0.5,vertex.label.color="black",vertex.siz
e=8,vertex.shape="sphere",edge.arrow.size=.5)
plot(g, vertex.color="green",edge.color="gray",vertex.label.cex=0.5,vertex.label.color="black",vertex.siz
e=8,vertex.shape="sphere",edge.arrow.size=.5)
plot(g, vertex.color="green",vertex.label.cex=0.5,vertex.label.color="black",vertex.siz
e=8,vertex.shape="sphere",edge.arrow.size=.5)
library(igraph)
dat <- read.csv("edge list.csv", header=TRUE) ## load the csv file
g <- graph_from_edgelist(dat)
knitr::opts_knit$set(root.dir = '/Users/neethaiyer/Box Sync/Courses_S19/ANT191_S19/Assignment1_ANT191_S19/Assignments_ANT191_S19/Assignment2_ANT191_S19' )
library(igraph)
dat <- read.csv("edge list.csv", header=TRUE) ## load the csv file
library(igraph)
## edge list.csv
dat <- read.csv("/Users/neethaiyer/Box Sync/Courses_S19/ANT191_S19/Assignment1_ANT191_S19/Assignments_ANT191_S19/Assignment2_ANT191_S19/edge list.csv", header=TRUE) ## load the csv file
g <- graph_from_edgelist(dat)
mat <- as.matrix(dat)
g <- graph_from_edgelist(mat)
plot(g)
plot(g,
edge.width = 2, ## weight of edges
vertex.color = terrain.colors(10), ## node colors
vertex.label.cex = 0.6, ## font size of node labels
vertex.size = 10, ## size of nodes
edge.arrow.size = 0.5, ## size of arrows on directed network
edge.arrow.width = 0.5, ## width of arrows on directed network
main = c("Great work, Padawan R-tists!"), ## adds main title
sub = c("You now know how to make beautiful networks using R!"), ## adds subtitle
layout = layout_nicely(g) ## choose an appropriate layout
)
V(g)$vertex_degree <- degree(g) ## calculates the degree centrality of all nodes in the network and saves these values as an attribute of each vertex in our network.
plot(g,
edge.width = 2,
vertex.color = terrain.colors(10),
vertex.label.cex = 0.6,
vertex.size = V(g)$vertex_degree,
edge.arrow.size = 0.5,
edge.arrow.width = 0.5,
main = c("Great work, Padawan R-tists!"),
sub = c("You now know how to make beautiful networks using R!"),
layout = layout_with_graphopt(g) ## note that you can save a randomly-generated layout as a vector so that each time you re-generate the graph it will be the same network.
)
plot(g, vertex.color= "darkorange1", vertex.lable.color= "darkblue", edge.width= .2, edge.lty=1, lable.font.size= 12,vertex.size=12, vertex.frame.color="black", edge.width= 4,layout=layout_with_dh, edge.arrow.size=.2, edge.color="cornflowerblue")
plot(g,vertex.color="green",edge.color="gray",vertex.label.cex=0.5,vertex.label.color="black",vertex.siz
e=8,vertex.shape="sphere",edge.arrow.size=.5)
plot(g,vertex.color="green",edge.color="gray",vertex.label.cex=0.5,vertex.label.color="black",vertex.siz
e=8,vertex.shape="sphere",edge.arrow.size=.5)
plot(g,vertex.color="green",edge.color="gray",vertex.label.cex=0.5,vertex.label.color="black",vertex.siz
e=8,vertex.shape="sphere",edge.arrow.size=.5)
plot(g,
vertex.color="green",
edge.color="gray",
vertex.label.cex=0.5,
vertex.label.color="black",
vertex.size=8,vertex.shape="sphere",edge.arrow.size=.5)
plot(g,
vertex.color="green",
edge.color="gray",
vertex.label.cex=0.5,
vertex.label.color="black",
vertex.size=8,vertex.shape="sphere",edge.arrow.size=1)
plot(g,
vertex.color="green",
edge.color="gray",
vertex.label.cex=0.5,
vertex.label.color="black",
vertex.size=8,vertex.shape="sphere",edge.arrow.size=0.2)
plot.igraph(g, color = "black", width = 3, frame.color = "blue", arrow.size = -100,
arrow.width = -100, rescale = TRUE, main = "Directed Node Chart", rescale = FALSE, asp
= -4, vertex.size = 5, label.color = "green", layout=layout_with_kk)
plot.igraph(g, color = "black", width = 6, frame.color = "blue", arrow.size = -100,
arrow.width = -100, rescale = TRUE, main = "Directed Node Chart", rescale = FALSE, asp
= -4, vertex.size = 5, label.color = "green", layout=layout_with_kk)
plot.igraph(g, color = "black", width = 10, frame.color = "blue", arrow.size = -100,
arrow.width = -100, rescale = TRUE, main = "Directed Node Chart", rescale = FALSE, asp
= -4, vertex.size = 5, label.color = "green", layout=layout_with_kk)
plot.igraph(g, color = "hiet", width = 10, frame.color = "blue", arrow.size = 100,
arrow.width = -100, rescale = TRUE, main = "Directed Node Chart", rescale = FALSE, asp
= -4, vertex.size = 5, label.color = "green", layout=layout_with_kk)
plot.igraph(g, color = "black", width = 10, frame.color = "blue", arrow.size = 2,
arrow.width = 2, main = "Directed Node Chart", asp
= 4, vertex.size = 5, label.color = "green", layout=layout_with_kk)
plot.igraph(g, color = "black", width = 10, frame.color = "blue", arrow.size = 2,
arrow.width = 2, main = "Directed Node Chart", vertex.size = 5, label.color = "green", layout=layout_with_kk)
plot.igraph(g, color = "black", width = 3, frame.color = "blue", arrow.size = -100,
arrow.width = -100, rescale = TRUE, main = "Directed Node Chart", rescale = FALSE, asp
= -4, vertex.size = 5, label.color = "green", layout=layout_with_kk)
plot.igraph(g, color = "black", width = 3, frame.color = "blue", arrow.size = -100,
arrow.width = -100, rescale = TRUE, main = "Directed Node Chart", rescale = FALSE, asp
= -4, vertex.size = 10, label.color = "green", layout=layout_with_kk)
plot.igraph(g, color = "black", width = 10, frame.color = "blue", arrow.size = -100,
arrow.width = -100, rescale = TRUE, main = "Directed Node Chart", rescale = FALSE, asp
= -4, vertex.size = 10, label.color = "green", layout=layout_with_kk)
plot.igraph(g, color = "black", width = 10, frame.color = "white", arrow.size = -100,
arrow.width = -100, rescale = TRUE, main = "Directed Node Chart", rescale = FALSE, asp
= -4, vertex.size = 10, label.color = "green", layout=layout_with_kk)
plot(g, vertex.color="turquoise", edge.color="gray29", edge.width=1.5, vertex.label.cex=0.8,
vertex.label.color="darkblue", vertex.frame.color="darkblue", vertex.size=9, edge.arrow.size=.3,
vertec.shape="sphere", edge.lty=6) #plotting and aesthetics
plot(g, vertex.color="turquoise", edge.color="gray29", edge.width=1.5, vertex.label.cex=0.8,
vertex.label.color="darkblue", vertex.frame.color="darkblue", vertex.size=9, edge.arrow.size=.3,
vertec.shape="sphere", edge.lty=6) #plotting and aesthetics
plot(g, vertex.color="turquoise", edge.color="gray29", edge.width=1.5, vertex.label.cex=0.8,
vertex.label.color="darkblue", vertex.frame.color="darkblue", vertex.size=9, edge.arrow.size=.3,
vertex.shape="sphere", edge.lty=6, layout=layout_with_lgl()) #plotting and aesthetics
plot(g, vertex.color="turquoise", edge.color="gray29", edge.width=1.5, vertex.label.cex=0.8,
vertex.label.color="darkblue", vertex.frame.color="darkblue", vertex.size=9, edge.arrow.size=.3,
vertex.shape="sphere", edge.lty=6, layout=layout_with_lgl #plotting and aesthetics
plot(g, vertex.color="turquoise", edge.color="gray29", edge.width=1.5, vertex.label.cex=0.8,
vertex.label.color="darkblue", vertex.frame.color="darkblue", vertex.size=9, edge.arrow.size=.3,
vertex.shape="sphere", edge.lty=6, layout=layout_with_lgl)
plot(g, vertex.color= "orange", vertex.lable.color= "black", edge.width=.2, edge.lty=1, lable.font.size= 12, vertex.size= 12, vertex.frame.color= "black", edge.width= 4, edg.color= "grey", layout= layout_with_dh, edge.arrow.size= .2, edge.color= "blue")
plot(g, vertex.size=7,vertex.color="navyblue", vertex.label.color="white",
edge.color="indianred", vertex.shape="crectangle", vertex.frame.color="dimgrey", margin=-.5,
label.cex=3)
plot(g, vertex.size=7,vertex.color="navyblue", vertex.label.color="white",
edge.color="indianred", vertex.shape="crectangle", vertex.frame.color="dimgrey")
plot(g, vertex.color = 1:7 , vertex.label.color="white", vertex.label.size= 2,edge.width=.2,
edge.lty=1, fontsize= 2, vertex.size=11, vertex.frame.color="blue",
vertex.shape="sphere",label.fontsize= 2,edge.width=4, edge.color="grey", edge.curved=0,
layout=layout.graphopt, edge.lty=.5, edge.arrow.size=.1)
plot(g, vertex.color = 1:7 , vertex.label.color="white", vertex.label.size= 5,edge.width=.2,
edge.lty=1, fontsize= 2, vertex.size=11, vertex.frame.color="blue",
vertex.shape="sphere",label.fontsize= 2,edge.width=4, edge.color="grey", edge.curved=0,
layout=layout.graphopt, edge.lty=.5, edge.arrow.size=.1)
plot(g, edge.color= "seashell4", vertex.color = c("tomato3", "skyblue4","skyblue"), vertex.size= 10,
vertex.label.color= "black", main= "Network Graph" )
plot(g, edge.color= "seashell4", vertex.color = c("tomato3", "skyblue4","skyblue"), vertex.size= 10,
vertex.label.color= "black", main= "Network Graph", layout=layout_nicely)
plot(g, edge.color= "seashell4", vertex.color = c("tomato3", "skyblue4","skyblue"), vertex.size= 5,
vertex.label.color= "black", main= "Network Graph", layout=layout_nicely)
plot(g, edge.color= "seashell4", vertex.color = c("tomato3", "skyblue4","skyblue"), vertex.size= 5,
vertex.label.color= "black", main= "Network Graph", layout=layout_nicely)
plot(g, edge.color= "seashell4", vertex.color = c("tomato3", "skyblue4","skyblue"), vertex.size= 10,
vertex.label.color= "black", main= "Network Graph", layout=layout_nicely)
plot(g, edge.color= "seashell4", vertex.color = c("tomato3", "skyblue4","skyblue"), vertex.size= 10,
vertex.label.color= "black", main= "Network Graph", layout=layout_with_dh)
plot(g, edge.color= "seashell4", vertex.color = c("tomato3", "skyblue4","skyblue"), vertex.size= 10,
vertex.label.color= "black", main= "Network Graph", layout=layout_with_lgl
plot(g, edge.color= "seashell4", vertex.color = c("tomato3", "skyblue4","skyblue"), vertex.size= 10,
vertex.label.color= "black", main= "Network Graph", layout=layout_with_lgl)
plot(g, edge.color= "seashell4", vertex.color = c("tomato3", "skyblue4","skyblue"), vertex.size= 10,
vertex.label.color= "black", main= "Network Graph")
plot(g, edge.color= "seashell4", vertex.color = c("tomato3", "skyblue4","skyblue"), vertex.size= 10,
vertex.label.color= "black", main= "Network Graph")
plot(g,vertex.color="green",edge.color="gray",vertex.label.cex=0.5,vertex.label.color="black",vertex.siz
e=8,vertex.shape="sphere",edge.arrow.size=.5)
plot(g,vertex.color="green",edge.color="gray",vertex.label.cex=0.5,vertex.label.color="black",vertex.size=8,vertex.shape="sphere",edge.arrow.size=.5)
plot(g,vertex.color="green",edge.color="gray",vertex.label.cex=0.5,vertex.label.color="black",vertex.size=8,vertex.shape="sphere",edge.arrow.size=.5)
plot(g,vertex.color="green",edge.color="gray",vertex.label.cex=0.5,vertex.label.color="black",vertex.size=8,vertex.shape="sphere",edge.arrow.size=.5)
install.packages("igraph")
install.packages("igraph")
library(igraph)
plot(g,vertex.color="green",edge.color="gray",vertex.label.cex=0.5,vertex.label.color="black",vertex.size=8,vertex.shape="sphere",edge.arrow.size=.5)
plot(g, edge.color= "seashell4", vertex.color = c("tomato3", "skyblue4","skyblue"), vertex.size= 10,
vertex.label.color= "black", main= "Network Graph" )
white
plot(g, edge.color= "seashell4", vertex.color = c("tomato3", "skyblue4","skyblue"), vertex.size= 10,
vertex.label.color= "white", main= "Network Graph" )
plot.igraph(g, node.size = 10, color = "orange", frame.color = "blue", shape =
"circle")
plot.igraph(g, node.size = 10, color = "blue", frame.color = "blue", shape =
"circle")
plot.igraph(g, node.size = 10, color = "blue", frame.color = "white", shape =
"circle")
plot.igraph(g, node.size = 2, color = "blue", frame.color = "white", shape =
"circle")
install.packages("igraph")
dat <- read.csv(paste0(workingDir, "Breuer_western gorilla life table.csv"))
## Data from Bronikowski et al (2016) for mountain gorillas (MTN)
## Note the first age of reproduction is 8 years although the first birth is usually at 10 years old for mountain gorillas and the fertility rate varied for each adult year.
dat1 <- read.csv(paste0(workingDir, "Bronikowski_Eastern female gorilla life table.csv"))
## Transform WLG life table into a Leslie matrix (fertility rates are in the top row, survival rates are just under the diagonal)
mat_wlg <- matrix(0, nrow=nrow(dat), ncol=nrow(dat)) ## create square matrix with 0s everywhere
mat_wlg[1,] <- dat[,3] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat_wlg)-1, nrow=ncol(mat_wlg)-1)
diag(mat2) <- 1-dat[-nrow(dat),2] ## survival rates are assigned to just under the diagonal of a LM
mat_wlg[2:nrow(mat_wlg), 1:(ncol(mat_wlg)-1)] <- mat2
head(mat_wlg) ## View and check matrix
## Transform MTN life table into a Leslie matrix (fertility rates are in the top row, survival rates are just under the diagonal)
mat_mtn <- matrix(0, nrow=nrow(dat1), ncol=nrow(dat1)) ## create square matrix with 0s everywhere
mat_mtn[1,] <- dat1[,3] ## first row in matrix assigned the fertility rates from the life table
mat_mtn_2 <- matrix(0,ncol=ncol(mat_mtn)-1, nrow=ncol(mat_mtn)-1)
diag(mat_mtn_2) <- 1-dat1[-nrow(dat1),2] ## survival rates are assigned to just under the diagonal of a LM
mat_mtn[2:nrow(mat_mtn), 1:(ncol(mat_mtn)-1)] <- mat_mtn_2
head(mat_mtn) ## View and check matrix
## Set the working directory:
workingDir <- "~/Box Sync/PVA_Paper/PVA_Tshiaberimu_R/"
dat <- read.csv(paste0(workingDir, "Breuer_western gorilla life table.csv"))
## Data from Bronikowski et al (2016) for mountain gorillas (MTN)
## Note the first age of reproduction is 8 years although the first birth is usually at 10 years old for mountain gorillas and the fertility rate varied for each adult year.
dat1 <- read.csv(paste0(workingDir, "Bronikowski_Eastern female gorilla life table.csv"))
## Transform WLG life table into a Leslie matrix (fertility rates are in the top row, survival rates are just under the diagonal)
mat_wlg <- matrix(0, nrow=nrow(dat), ncol=nrow(dat)) ## create square matrix with 0s everywhere
mat_wlg[1,] <- dat[,3] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat_wlg)-1, nrow=ncol(mat_wlg)-1)
diag(mat2) <- 1-dat[-nrow(dat),2] ## survival rates are assigned to just under the diagonal of a LM
mat_wlg[2:nrow(mat_wlg), 1:(ncol(mat_wlg)-1)] <- mat2
head(mat_wlg) ## View and check matrix
## Transform MTN life table into a Leslie matrix (fertility rates are in the top row, survival rates are just under the diagonal)
mat_mtn <- matrix(0, nrow=nrow(dat1), ncol=nrow(dat1)) ## create square matrix with 0s everywhere
mat_mtn[1,] <- dat1[,3] ## first row in matrix assigned the fertility rates from the life table
mat_mtn_2 <- matrix(0,ncol=ncol(mat_mtn)-1, nrow=ncol(mat_mtn)-1)
diag(mat_mtn_2) <- 1-dat1[-nrow(dat1),2] ## survival rates are assigned to just under the diagonal of a LM
mat_mtn[2:nrow(mat_mtn), 1:(ncol(mat_mtn)-1)] <- mat_mtn_2
head(mat_mtn) ## View and check matrix
View(mat_wlg)
write.csv(mat_wlg, file=paste0(workingDir,"LeslieMatrix_WLG.csv"), row.names=F)
write.csv(mat_mtn, file=paste0(workingDir,"LeslieMatrix_MTN.csv"), row.names=F)
mat <- mat_wlg ## make sure you choose either the WLG or MTN LM (mat or mat_mtn respectively)
#mat <- mat_wlg
pop_projection <- function(tfinal, LM=mat, No=No){
pop <- N <- No
for (i in 1:tfinal){
pop <- LM%*%pop
N <- cbind(N,pop)
}
N
}
## The function below returns the stochastic LM population size projection, using the projection period (tfinal), age and number of females in the starting population (No) and Leslie matrix (LM).
stoch_projection <- function(tfinal, LM=mat, No=No){
pop <- N <- No
for (i in 1:tfinal){
currentpop <- pop
for (j in 1:length(No)){
pop[j] <- sum(rbinom(n=length(No), size=currentpop, prob=LM[j,]))
}
N <- cbind(N, pop)
}
N
}
## Now, let's apply the functions using each reintrodcution scenario. Load the appropriate csv file.
ReintroScenario <- read.csv(paste0(workingDir, "ReintroductionScenarios_LM.csv"))
nyears <- 50 ## projection period
## Scenario A: starting population as current Tshiaberimu status: 1 adult female (assuming juvenile is M) / age:19
No_A <- ReintroScenario$No_A
N_A <- pop_projection(tfinal=nyears, LM=mat, No=No_A)
N_projected_detA <- apply(N_A,2,sum)
colnames(ReintroScenario)[1]
colnames(ReintroScenario)[2]
ncol(ReintroScenario)
colnames(ReintroScenario)[[1]]
colnames(ReintroScenario)[[2]]
ReintroScenario[i]
ReintroScenario[1]
ReintroScenario[2]
ReintroScenario[3]
N_projected_detA
str_split(colnames(ReintroScenario)[i], "_")
str_split(colnames(ReintroScenario)[1], "_")
tail(colnames(ReintroScenario)[2], tail, 1))
tail(colnames(ReintroScenario)[2], tail, 1)
strsplit(colnames(ReintroScenario)[2], "_")
strsplit(colnames(ReintroScenario)[2], "_")[[1]][2]
paste(N_projected_det, strsplit(colnames(ReintroScenario)[2], "_")[[1]][2], "_")
paste("N_projected_det", strsplit(colnames(ReintroScenario)[2], "_")[[1]][2], "_")
paste("N_projected_det", strsplit(colnames(ReintroScenario)[2], "_")[[1]][2], "")
paste("N_projected_det", strsplit(colnames(ReintroScenario)[2], "_")[[1]][2])
paste("N_projected_det", strsplit(colnames(ReintroScenario)[2], "_")[[1]][2], NULL)
paste0("N_projected_det", strsplit(colnames(ReintroScenario)[2], "_")[[1]][2])
No <- ReintroScenario[2]
N <- pop_projection(tfinal=nyears, LM=mat, No=No)
No
class(N)
class(No)
N <- pop_projection(tfinal=nyears, LM=mat, No=No)
No_A <- ReintroScenario$No_A
No_A
ReintroScenario[,2]
paste0("N_projected_det", strsplit(colnames(ReintroScenario)[,2], "_")[[1]][2]) <- apply(N,2,sum)
No <- ReintroScenario[,2]
N <- pop_projection(tfinal=nyears, LM=mat, No=No)
scenario <- strsplit(colnames(ReintroScenario)[,2], "_")[[1]][2]
scenario <- strsplit(colnames(ReintroScenario)[2], "_")[[1]][2]
scenario
paste0("N_projected_det", scenario) <- apply(N,2,sum)
assign(paste0("N_projected_det", scenario)) <- apply(N,2,sum)
assign(paste0("N_projected_det", scenario), apply(N,2,sum))
dat <- read.csv(paste0(workingDir, "LifeTable_WLG_Breuer.csv"))
## Data from Bronikowski et al (2016) for mountain gorillas (MTN)
## Note the first age of reproduction is 8 years although the first birth is usually at 10 years old for mountain gorillas and the fertility rate varied for each adult year.
dat1 <- read.csv(paste0(workingDir, "LifeTable_MTN_Bronikowski.csv"))
## Transform WLG life table into a Leslie matrix (fertility rates are in the top row, survival rates are just under the diagonal)
mat_wlg <- matrix(0, nrow=nrow(dat), ncol=nrow(dat)) ## create square matrix with 0s everywhere
mat_wlg[1,] <- dat[,3] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat_wlg)-1, nrow=ncol(mat_wlg)-1)
diag(mat2) <- 1-dat[-nrow(dat),2] ## survival rates are assigned to just under the diagonal of a LM
mat_wlg[2:nrow(mat_wlg), 1:(ncol(mat_wlg)-1)] <- mat2
head(mat_wlg) ## View and check matrix
mat_mtn <- matrix(0, nrow=nrow(dat1), ncol=nrow(dat1)) ## create square matrix with 0s everywhere
mat_mtn[1,] <- dat1[,3] ## first row in matrix assigned the fertility rates from the life table
mat_mtn_2 <- matrix(0,ncol=ncol(mat_mtn)-1, nrow=ncol(mat_mtn)-1)
diag(mat_mtn_2) <- 1-dat1[-nrow(dat1),2] ## survival rates are assigned to just under the diagonal of a LM
mat_mtn[2:nrow(mat_mtn), 1:(ncol(mat_mtn)-1)] <- mat_mtn_2
head(mat_mtn) ## View and check matrix
## Set the working directory:
workingDir <- "~/Box Sync/PVA_Paper/PVA_Tshiaberimu_R/"
dat <- read.csv(paste0(workingDir, "LifeTable_WLG_Breuer.csv"))
## Data from Bronikowski et al (2016) for mountain gorillas (MTN)
## Note the first age of reproduction is 8 years although the first birth is usually at 10 years old for mountain gorillas and the fertility rate varied for each adult year.
dat1 <- read.csv(paste0(workingDir, "LifeTable_MTN_Bronikowski.csv"))
## Transform WLG life table into a Leslie matrix (fertility rates are in the top row, survival rates are just under the diagonal)
mat_wlg <- matrix(0, nrow=nrow(dat), ncol=nrow(dat)) ## create square matrix with 0s everywhere
mat_wlg[1,] <- dat[,3] ## first row in matrix assigned the fertility rates from the life table
mat2 <- matrix(0,ncol=ncol(mat_wlg)-1, nrow=ncol(mat_wlg)-1)
diag(mat2) <- 1-dat[-nrow(dat),2] ## survival rates are assigned to just under the diagonal of a LM
mat_wlg[2:nrow(mat_wlg), 1:(ncol(mat_wlg)-1)] <- mat2
head(mat_wlg) ## View and check matrix
mat_mtn <- matrix(0, nrow=nrow(dat1), ncol=nrow(dat1)) ## create square matrix with 0s everywhere
mat_mtn[1,] <- dat1[,3] ## first row in matrix assigned the fertility rates from the life table
mat_mtn_2 <- matrix(0,ncol=ncol(mat_mtn)-1, nrow=ncol(mat_mtn)-1)
diag(mat_mtn_2) <- 1-dat1[-nrow(dat1),2] ## survival rates are assigned to just under the diagonal of a LM
mat_mtn[2:nrow(mat_mtn), 1:(ncol(mat_mtn)-1)] <- mat_mtn_2
head(mat_mtn) ## View and check matrix
mat <- mat_wlg ## make sure you choose either the WLG or MTN LM (mat or mat_mtn respectively)
#mat <- mat_wlg
pop_projection <- function(tfinal, LM=mat, No=No){
pop <- N <- No
for (i in 1:tfinal){
pop <- LM%*%pop
N <- cbind(N,pop)
}
N
}
## The function below returns the stochastic LM population size projection, using the projection period (tfinal), age and number of females in the starting population (No) and Leslie matrix (LM).
stoch_projection <- function(tfinal, LM=mat, No=No){
pop <- N <- No
for (i in 1:tfinal){
currentpop <- pop
for (j in 1:length(No)){
pop[j] <- sum(rbinom(n=length(No), size=currentpop, prob=LM[j,]))
}
N <- cbind(N, pop)
}
N
}
## Now, let's apply the functions using each reintrodcution scenario. Load the appropriate csv file.
ReintroScenario <- read.csv(paste0(workingDir, "ReintroductionScenarios_LM.csv"))
nyears <- 50 ## projection period
No <- ReintroScenario[,2]
N <- pop_projection(tfinal=nyears, LM=mat, No=No)
scenario <- strsplit(colnames(ReintroScenario)[2], "_")[[1]][2]
assign(paste0("N_projected_det", scenario), apply(N,2,sum))
View(dat)
N_projected_detA
drop(N_projected_detA)
rm(N_projected_detA)
nyears <- 50 ## projection period
projectPop <- for(i in 2:ncol(ReintroScenario)){
No <- ReintroScenario[,i] ## Get the reintroduction scenario
N <- pop_projection(tfinal=nyears, LM=mat, No=No) ## Apply pop_projection function to No for this scenario
scenario <- strsplit(colnames(ReintroScenario)[i], "_")[[1]][2] ## Get the last element of the column name for each reintroducion scenario
assign(paste0("N_projected_det", scenario), apply(N,2,sum))  ## Apply the deterministic projection to all scenarios. The assign function takes a variable name as a character string and assigns a value to it. In this case, the values are N at each time step of the projection
}
nruns <- 1000 ## number of simulations of the model
## The temp vectors are empty matrices that will save the number of individuals for each year of the projection for each run of the projection
tempA <- tempB <- tempC <- tempD <- tempE <- tempF <- tempG <- tempH <- tempI <- matrix(0, nrow=nyears+1, ncol=nruns)
## Run each scenario 1000 times using the stochastic projection
for(i in 1:nruns) {
tempA[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=No_A),2,sum)
tempB[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=No_B),2,sum)
tempC[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=No_C),2,sum)
tempD[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=No_D),2,sum)
tempE[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=No_E),2,sum)
tempF[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=No_F),2,sum)
tempG[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=No_G),2,sum)
tempH[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=No_H),2,sum)
tempI[1:(nyears+1),i] <- apply(stoch_projection(tfinal=nyears, LM=mat, No=No_I),2,sum)
}
## What is probability that simulation results in extinction at the end of 50 years? What is the probability that the population reaches at least 50 (or 40, 100, 150) individuals within 50 years?
prob_50years <- data.frame(scenario = as.factor(LETTERS[1:9]),
prob_150 =  NA,
prob_100 = NA,
prob_50 = NA,
prob_40 = NA,
prob_Extn = NA)
index <- 0
for(i in c("temp", "temp0", "temp2", "temp3", "temp4", "temp5", "temp6", "temp7", "temp8")){
index <- index+1
tempx <- get(i)
ext <- tempx[nrow(tempx),]==0
probExt <- mean(ext)
probNe_150 <- mean(tempx[nrow(tempx),]>=150)
probNe_100 <- mean(tempx[nrow(tempx),]>=100)
probNe_50 <- mean(tempx[nrow(tempx),]>=50)
probNe_40 <- mean(tempx[nrow(tempx),]>=40)
prob_50years[index,2:6] <- c(probNe_150, probNe_100, probNe_50, probNe_40, probExt)*100
}
for(i in 1:nruns) {
for(j in 2:ncol(ReintroScenario)){
No <- ReintroScenario[,j]
scenario <- strsplit(colnames(ReintroScenario)[j], "_")[[1]][2] ## Get the last element of the column name for each reintroducion scenario
assign(paste0("temp", scenario)[1:(nyears+1),i], stoch_projection(tfinal=nyears, LM=mat, No=No),2,sum)
}
}
paste0("temp", scenario)
paste0("temp", scenario)[1:(nyears+1),i]
for(i in 1:nruns) {
for(j in 2:ncol(ReintroScenario)){
No <- ReintroScenario[,j]
scenario <- strsplit(colnames(ReintroScenario)[j], "_")[[1]][2] ## Get the last element of the column name for each reintroducion scenario
assign(paste0("temp", scenario)[1:(nyears+1),i], apply(stoch_projection(tfinal=nyears, LM=mat, No=No),2,sum))
}
}
paste0("temp", scenario)[1:(nyears+1),i]
paste0("temp", scenario)[1:(nyears+1),1]
[1:(nyears+1),i]
1:(nyears+1),1
paste0("temp", scenario)
for(i in 1:nruns) {
for(j in 2:ncol(ReintroScenario)){
No <- ReintroScenario[,j]
scenario <- strsplit(colnames(ReintroScenario)[j], "_")[[1]][2] ## Get the last element of the column name for each reintroducion scenario
}
assign(paste0("temp", scenario)[1:(nyears+1),i], apply(stoch_projection(tfinal=nyears, LM=mat, No=No),2,sum))
}
nruns <- 1000 ## number of simulations of the model
## The temp vectors are empty matrices that will save the number of individuals for each year of the projection for each run of the projection
tempA <- tempB <- tempC <- tempD <- tempE <- tempF <- tempG <- tempH <- tempI <- matrix(0, nrow=nyears+1, ncol=nruns)
for(i in 1:nruns) {
for(j in 2:ncol(ReintroScenario)){
No <- ReintroScenario[,j]
scenario <- strsplit(colnames(ReintroScenario)[j], "_")[[1]][2] ## Get the last element of the column name for each reintroducion scenario
assign(paste0("temp", scenario)[1:(nyears+1),i], apply(stoch_projection(tfinal=nyears, LM=mat, No=No),2,sum))
}
}
scenario[1:(nyears+1),i]
class(N_projected_detA)
for(j in 2:ncol(ReintroScenario)){
No <- ReintroScenario[,j]
scenario <- strsplit(colnames(ReintroScenario)[j], "_")[[1]][2] ## Get the last element of the column name for each reintroducion scenario
for(i in 1:nruns){
assign(paste0("temp", scenario)[1:(nyears+1),i], apply(stoch_projection(tfinal=nyears, LM=mat, No=No),2,sum))
}
}
for(j in 2:ncol(ReintroScenario)){
No <- ReintroScenario[,j]
scenario <- strsplit(colnames(ReintroScenario)[j], "_")[[1]][2] ## Get the last element of the column name for each reintroducion scenario
for(i in 1:nruns){
assign(paste0("temp", scenario)[1:(nyears+1),i], apply(stoch_projection(tfinal=nyears, LM=mat, No=No),2,sum))
}
}
View(tempA)
paste0("temp", scenario)
No
## Set the working directory:
workingDir <- "~/Box Sync/PVA_Paper/PVA_Tshiaberimu_R/"
## Data from Bronikowski et al (2016) for mountain gorillas (MTN)
## Note the first age of reproduction is 8 years although the first birth is usually at 10 years old for mountain gorillas and the fertility rate varied for each adult year.
datBron <- read.csv(paste0(workingDir, "LifeTable_MTN_Bronikowski.csv"))
dat1 <- datBron
## Data from Bronikowski et al (2016) for mountain gorillas (MTN)
## Note the first age of reproduction is 8 years although the first birth is usually at 10 years old for mountain gorillas and the fertility rate varied for each adult year.
datBron <- read.csv(paste0(workingDir, "LifeTable_MTN_Bronikowski.csv"))
dat1 <- datBron
View(dat1)
dat1$fertilityrate_1percent <- datBron[,3]*.643
dat1$fertilityrate_2percent <- datBron[,3]*.786
## Transform MTN life table into a Leslie matrix (fertility rates are in the top row, survival rates are just under the diagonal)
mat_mtn <- matrix(0, nrow=nrow(dat1), ncol=nrow(dat1)) ## create square matrix with 0s everywhere
mat_mtn[1,] <- dat1[,4] ## first row in matrix assigned the fertility rates from the life table
mat_mtn_2 <- matrix(0,ncol=ncol(mat_mtn)-1, nrow=ncol(mat_mtn)-1)
diag(mat_mtn_2) <- 1-dat1[-nrow(dat1),2] ## survival rates are assigned to just under the diagonal of a LM
mat_mtn[2:nrow(mat_mtn), 1:(ncol(mat_mtn)-1)] <- mat_mtn_2
head(mat_mtn) ## View and check matrix
View(mat_mtn)
#write.csv(mat_mtn, file=paste0(workingDir,"LeslieMatrix_MTN.csv"), row.names=F)
## Calculate the eigenvalue of the matrices
eigenvalues_mtn <- eigen(mat_mtn, only.values=TRUE)
Re(eigenvalues_mtn$values[1]) ## this is the dominant eigenvalue of the MTN LM, i.e. lambda = 1.032567
dat1$fertilityrate_2percent <- datBron[,3]*.786
mat_mtn <- matrix(0, nrow=nrow(dat1), ncol=nrow(dat1)) ## create square matrix with 0s everywhere
mat_mtn[1,] <- dat1[,5] ## first row in matrix assigned the fertility rates from the life table
mat_mtn_2 <- matrix(0,ncol=ncol(mat_mtn)-1, nrow=ncol(mat_mtn)-1)
diag(mat_mtn_2) <- 1-dat1[-nrow(dat1),2] ## survival rates are assigned to just under the diagonal of a LM
mat_mtn[2:nrow(mat_mtn), 1:(ncol(mat_mtn)-1)] <- mat_mtn_2
head(mat_mtn) ## View and check matrix
#write.csv(mat_mtn, file=paste0(workingDir,"LeslieMatrix_MTN.csv"), row.names=F)
## Calculate the eigenvalue of the matrices
eigenvalues_mtn <- eigen(mat_mtn, only.values=TRUE)
Re(eigenvalues_mtn$values[1]) ## this is the dominant eigenvalue of the MTN LM, i.e. lambda = 1.032567
mat_mtn <- matrix(0, nrow=nrow(dat1), ncol=nrow(dat1)) ## create square matrix with 0s everywhere
mat_mtn[1,] <- dat1[,4] ## first row in matrix assigned the fertility rates from the life table
mat_mtn_2 <- matrix(0,ncol=ncol(mat_mtn)-1, nrow=ncol(mat_mtn)-1)
diag(mat_mtn_2) <- 1-dat1[-nrow(dat1),2] ## survival rates are assigned to just under the diagonal of a LM
mat_mtn[2:nrow(mat_mtn), 1:(ncol(mat_mtn)-1)] <- mat_mtn_2
head(mat_mtn) ## View and check matrix
write.csv(mat_mtn, file=paste0(workingDir,"LeslieMatrix_MTN_1percent.csv"), row.names=F)
mat_mtn <- matrix(0, nrow=nrow(dat1), ncol=nrow(dat1)) ## create square matrix with 0s everywhere
mat_mtn[1,] <- dat1[,5] ## first row in matrix assigned the fertility rates from the life table
mat_mtn_2 <- matrix(0,ncol=ncol(mat_mtn)-1, nrow=ncol(mat_mtn)-1)
diag(mat_mtn_2) <- 1-dat1[-nrow(dat1),2] ## survival rates are assigned to just under the diagonal of a LM
mat_mtn[2:nrow(mat_mtn), 1:(ncol(mat_mtn)-1)] <- mat_mtn_2
head(mat_mtn) ## View and check matrix
write.csv(mat_mtn, file=paste0(workingDir,"LeslieMatrix_MTN_2percent.csv"), row.names=F)
